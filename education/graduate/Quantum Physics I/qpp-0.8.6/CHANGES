Version 0.1 - 21 December 2014
    - First stable version, initial public release

Version 0.2 - 26 January 2015
    - Minor fixes
    - Added prime-number related functions in <number_theory.h>:
        qpp::factors() - prime factors of positive integer
        qpp::isprime() - primality test

Version 0.3 - 15 February 2015
    - Added qpp::internal::Singleton<T>::get_thread_local_instance()

Version 0.4 - 8 March 2015
    - Added noexcept specification where suitable
    - Added the following exception types to the qpp::Exception::Type strong
        enumeration: NOT_QUBIT_MATRIX (replaces previous NOT_QUBIT_GATE),
        NOT_QUBIT_CVECTOR, NOT_QUBIT_RVECTOR and NOT_QUBIT_VECTOR
    - Added overloads of qpp::ptrace1(), qpp::ptrace2(), qpp::ptrace() and
        qpp::ptranspose() that allow a pure state input, as it was the case
        before with qpp::syspermute()
    - Added overloads of qpp::prod() and qpp::sum() for STL-like containers
    - Added new functions in <functions.h>:
        qpp::complement()  - computes the complement of a subsystem vector
        qpp::rho2bloch()   - qubit density matrix to Bloch vector
        qpp::bloch2rho()   - Bloch vector to qubit density matrix
    - Added new functions in <instruments.h>:
        qpp::measure_seq() - measures subsystems sequentially
    - Removed support for the C-style random number engine, as it is not 
        thread safe. Hence, Eigen::Matrix::Random() should not be used, 
        use instead qpp::rand() functions.
    - Added support for unit testing via Google Mock/Google Test, see
        ./unit_tests/testing.cpp

Version 0.5 - 19 March 2015
    - Fixed a bug in class qpp::internal::Singleton<T> which allowed deleting
        the instance via a pointer. Now static void operator delete(void*) 
        is marked private.

Version 0.6 - 16 April 2015
    - Reverted changes to qpp::internal::Singleton<T> (no need anymore for
        static void operator delete(void*)), but clients have to explicitly
        mark both constructor and destructor private
    - Minor cosmetic changes

Version 0.7 - 22 April 2015
    - Marked all non-template functions defined in headers as "inline" and
        all singletons as "static", since otherwise including <qpp.h> in
        separate compilation units led to linker errors due to duplicated
        symbols

Version 0.8 - 8 May 2015
    - Added new data type aliases in <types.h>
        bigint        - Big integer, alias for long long int
        ubigint       - Non-negative big integer, alias for
                        unsigned long long int
    - Added new overloads in <random.h>:
        qpp::rand()   - overloads for bigint and ubigint
    - Added new functions in <number_theory.h>:
        qpp::modpow() - computes a^n mod p for non-negative integers
    - Added IDisplay as an abstract base class for enforcing the override of
        its member function
            std::ostream& IDisplay::display(std::ostream&) const
        in all derived classes. This latter function performs all of the stream
        extraction operator work, and it is invoked automatically by the
            friend std::ostream& operator<<(std::ostream&, const qpp::IDisplay&)
        defined inline in qpp::IDisplay. In other words, the extraction
        operator delegates the work to the virtual display() function.
        Finally, all classes that support stream extraction (qpp::IOManipEigen,
        qpp::IOManipPointer, qpp::IOManipRange and qpp::Timer) now inherit
        from qpp::IDisplay.
    - Replaced std::basic_ostream<charT, traits> by std::ostream in all code,
        as using traits over-complicated the design and it was not worth it
    - Marked final all classes that are not intended to be used as base classes
    - Modified the CMakeLists.txt, which now:
        - supports only GNU gcc and LLVM/Apple clang, otherwise emits an error
          during the cmake running phase
        - adds -D_NO_THREAD_LOCAL definition for conditional compiling the
          source code without support for std::thread_local (if using e.g.
          LLVM/Apple clang with libc++, as libc++ does not yet support
          std::thread_local)
        - uses OpenMP only if the compiler is detected as GNU gcc

Version 0.8.2 - 20 May 2015
    - Added <traits.h> type traits header file with the following type traits:
        qpp::is_iterable<> - checks for iterable STL-like containers
        qpp::is_matrix_expression<> - checks for Eigen::MatrixBase<> expressions
        qpp::is_complex<>  - checks whether the type is std::complex<>
    - Added <statistics.h> header file containing the following new functions:
        qpp::uniform()     - uniform probability distribution vector
        qpp::marginalX()   - marginal distribution
        qpp::marginalY()   - marginal distribution
        qpp::avg()         - average
        qpp::sigma()       - standard deviation
        qpp::cov()         - covariance
        qpp::cor()         - correlation
        qpp::var()         - variance
    - Added new examples in ./examples

Version 0.8.4 - 14 October 2015
    - Added <macros.h> preprocessor debug macros header, containing:
        PRINT(x)   - std::cout << (x)
        PRINTLN(x) - std::cout << (x) << std::endl
        ERROR(x)   - std::cerr << (x)
        ERRORLN(x) - std::cerr << (x) << std::endl
    - Added new functions in <operations.h>:
        qpp::ip()  - Generalized inner product
    - Modified qpp::measure() so that the output consists of pure states
        whenever the input is a pure state and the measurement operators are
        rank-one POVMs (technically rank-one Kraus operators). Includes basis
        measurements as a particular case.
    - Improved qpp::Timer<>, now both the duration and the clock's type can be
        specified as template parameters, defaulted to
        std::chrono::duration<double> and std::chrono::steady_clock,
        respectively

Version 0.8.6 - 1 November 2015
    - Fixed serious bug in qpp::applyCTRL(), which was failing before for
        control gates with 2 or more controls. Added unit test in
        ./unit_tests/testing.cpp.
