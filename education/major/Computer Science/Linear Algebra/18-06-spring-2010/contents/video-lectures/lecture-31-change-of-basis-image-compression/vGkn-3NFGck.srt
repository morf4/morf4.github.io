1
00:00:07,000 --> 00:00:07,930
OK.

2
00:00:07,930 --> 00:00:13,000
So, coming nearer the end of
the course, this lecture will be

3
00:00:13,000 --> 00:00:18,000
a mixture of the linear algebra
that comes with a change of

4
00:00:18,000 --> 00:00:19,000
basis.

5
00:00:19,000 --> 00:00:24,370
And a change of basis from one
basis to another basis is

6
00:00:24,370 --> 00:00:27,000
something you really do in
applications.

7
00:00:27,000 --> 00:00:33,000
And, I would like to talk about
those applications.

8
00:00:33,000 --> 00:00:37,000
I got a little bit involved
with compression.

9
00:00:37,000 --> 00:00:40,000
Compressing a signal,
compressing an image.

10
00:00:40,000 --> 00:00:42,000
And that's exactly
change-of-basis.

11
00:00:42,000 --> 00:00:46,000
And then, the main theme in
this chapter is th- the

12
00:00:46,000 --> 00:00:49,000
connection between a linear
transformation,

13
00:00:49,000 --> 00:00:54,000
which doesn't have to have
coordinates, and the matrix that

14
00:00:54,000 --> 00:00:59,700
tells us that transformation
with respect to coordinates.

15
00:00:59,700 --> 00:01:05,000
So the matrix is the
coordinate-based description of

16
00:01:05,000 --> 00:01:09,000
the linear transformation.

17
00:01:09,000 --> 00:01:16,000
Let me start out with the nice
part, which is just to tell you

18
00:01:16,000 --> 00:01:21,000
something about image
compression.

19
00:01:21,000 --> 00:01:24,000
Those of you -- well,
everybody's going to meet

20
00:01:24,000 --> 00:01:29,000
compression, because you know
that the amount of data that

21
00:01:29,000 --> 00:01:33,000
we're getting -- well,
these lectures are compressed.

22
00:01:33,000 --> 00:01:37,000
So that, actually,
probably you see my motion as

23
00:01:37,000 --> 00:01:37,000
jerky?
Shall I use that word?

24
00:01:40,000 --> 00:01:41,000
Have you looked on the web?

25
00:01:41,000 --> 00:01:43,000
I should like to find a better
word.

26
00:01:43,000 --> 00:01:45,000
Compressed, let's say.

27
00:01:45,000 --> 00:01:48,000
So the complete signal is,
of course, in those video

28
00:01:48,000 --> 00:01:51,000
cameras, and in the videotape,
but that goes to the bottom of

29
00:01:51,000 --> 00:01:54,240
building nine,
and out of that comes a jumpy

30
00:01:54,240 --> 00:01:57,000
motion because it uses a
standard system for compressing

31
00:01:57,000 --> 00:01:58,000
images.

32
00:01:58,000 --> 00:02:08,000
And, you'll notice that the
stuff that sits on the board

33
00:02:08,000 --> 00:02:18,000
comes very clearly,
but it's my motion that needs a

34
00:02:18,000 --> 00:02:23,000
whole lot of bits,
right?

35
00:02:23,000 --> 00:02:29,000
So, and if I were to run up and
back up there and back,

36
00:02:29,000 --> 00:02:35,890
that would need too many bits,
and I'd be compressed even

37
00:02:35,890 --> 00:02:36,000
more.

38
00:02:36,000 --> 00:02:39,000
So, what does compression mean?

39
00:02:39,000 --> 00:02:44,000
Let me just think of a still
image.

40
00:02:44,000 --> 00:02:47,000
And of course,
satellites, and computations of

41
00:02:47,000 --> 00:02:51,000
the climate, computations of
combustion, the computers and

42
00:02:51,000 --> 00:02:54,000
sensors of all kinds are just
giving us overwhelming amounts

43
00:02:54,000 --> 00:02:55,000
of data.

44
00:02:55,000 --> 00:02:56,000
The Web is, too.

45
00:02:56,000 --> 00:02:59,000
Now, some compression can be
done with no loss.

46
00:02:59,000 --> 00:03:02,000
Lossless compression is
possible just using,

47
00:03:02,000 --> 00:03:05,000
sort of, the fact that there
are redundancies.

48
00:03:05,000 --> 00:03:11,000
But I'm talking here about
lossy compression.

49
00:03:11,000 --> 00:03:15,000
So I'm talking about -- here's
an image.

50
00:03:15,000 --> 00:03:19,000
And what does an image consist
of?

51
00:03:19,000 --> 00:03:25,000
It consists of a lot of little
pixels, right?

52
00:03:25,000 --> 00:03:30,000
Maybe five hundred and twelve
by five hundred and twelve.

53
00:03:30,000 --> 00:03:34,000
Two to the ninth by two to the
ninth pixels,

54
00:03:34,000 --> 00:03:39,000
and so this is pixel number
one, one, so that's a pixel.

55
00:03:39,000 --> 00:03:43,890
And if we're in black and
white, the typical pixel would

56
00:03:43,890 --> 00:03:49,000
tell us a gray-scale,
from zero to two fifty five.

57
00:03:49,000 --> 00:03:53,000
So a pixel is usually a value
of one of the xi,

58
00:03:53,000 --> 00:03:59,000
so this would be the i-th
pixel, is -- it's usually a real

59
00:03:59,000 --> 00:04:03,000
number on a scale from zero to
two fifty five.

60
00:04:03,000 --> 00:04:06,000
In other words,
two to the eighth

61
00:04:06,000 --> 00:04:08,000
possibilities.

62
00:04:08,000 --> 00:04:12,000
So usually, that's the
standard, so that's eight --

63
00:04:12,000 --> 00:04:15,000
eight bits.

64
00:04:15,000 --> 00:04:23,000
But then we have that for every
pixel, so we have five hundred

65
00:04:23,000 --> 00:04:30,610
and twelve squared pixels,
we're really operating x is a

66
00:04:30,610 --> 00:04:34,000
vector in R^n,
but what is n?

67
00:04:34,000 --> 00:04:40,000
n is five hundred and twelve
squared.

68
00:04:40,000 --> 00:04:44,000
That's our problem,
right there.

69
00:04:44,000 --> 00:04:51,000
A pixel is a vector that gives
us the information about the

70
00:04:51,000 --> 00:04:52,000
image.

71
00:04:52,000 --> 00:04:53,000
I'm sorry.

72
00:04:53,000 --> 00:05:02,000
The image that comes through is
a vector of that length that --

73
00:05:02,000 --> 00:05:06,470
that's the information that we
have about the image,

74
00:05:06,470 --> 00:05:10,000
if it's a color image,
we would have three times that

75
00:05:10,000 --> 00:05:15,000
length, because we'd need three
coordinates to get color.

76
00:05:15,000 --> 00:05:20,000
So it would be three times five
hundred and twelve squared.

77
00:05:20,000 --> 00:05:25,000
It's an enormous amount of
information, and we couldn't

78
00:05:25,000 --> 00:05:30,000
send out the image for these
lectures without compressing it.

79
00:05:30,000 --> 00:05:33,000
It would overload the system.

80
00:05:33,000 --> 00:05:35,000
So it has to be compressed.

81
00:05:35,000 --> 00:05:40,000
The standard compression,
and still used with lectures

82
00:05:40,000 --> 00:05:42,000
is, called JPEG.

83
00:05:42,000 --> 00:05:46,000
I think that stands for Joint
Photographic Experts Group.

84
00:05:46,000 --> 00:05:49,000
They established a system of
compression.

85
00:05:49,000 --> 00:05:52,000
And I just want to tell you
what it's about.

86
00:05:52,000 --> 00:05:54,000
It's a change-of-basis.

87
00:05:54,000 --> 00:05:55,000
What basis do we have?

88
00:05:55,000 --> 00:05:58,000
The current basis we have is,
you could say,

89
00:05:58,000 --> 00:06:00,000
the standard basis is,
every pixel,

90
00:06:00,000 --> 00:06:02,000
give a value.

91
00:06:02,000 --> 00:06:11,000
So that's like we have a vector
x which is five hundred and

92
00:06:11,000 --> 00:06:17,450
twelve squared long and,
in the i-th position,

93
00:06:17,450 --> 00:06:25,000
we get a number like one twenty
one or something.

94
00:06:25,000 --> 00:06:28,000
The pixel next to it might be
one twenty four,

95
00:06:28,000 --> 00:06:31,000
maybe where my tie begins to
enter, so if it was mostly blue

96
00:06:31,000 --> 00:06:35,000
shirt, this would be a slight
difference in shading,

97
00:06:35,000 --> 00:06:37,000
but pretty close,
then the tie would be a

98
00:06:37,000 --> 00:06:40,000
different color,
so we might have quite a few

99
00:06:40,000 --> 00:06:44,270
pixels for the blue shirt,
and a whole lot more for the

100
00:06:44,270 --> 00:06:47,000
blackboard, that are very close.

101
00:06:47,000 --> 00:06:49,000
And that's what are very
correlated.

102
00:06:49,000 --> 00:06:53,000
And that's what gives us the
possibility of compression.

103
00:06:53,000 --> 00:06:56,000
For example,
before the lecture starts,

104
00:06:56,000 --> 00:07:00,000
if we had a blank blackboard,
then there's an image,

105
00:07:00,000 --> 00:07:04,000
but it would make no sense to
take that image and tell you

106
00:07:04,000 --> 00:07:07,000
what it is pixel by pixel.

107
00:07:07,000 --> 00:07:14,000
I mean, there's a case in which
all pixel values,

108
00:07:14,000 --> 00:07:22,000
all gray levels are the same --
or practically the same,

109
00:07:22,000 --> 00:07:31,000
depending on the erasing of the
board, but extremely close --

110
00:07:31,000 --> 00:07:35,000
and, so that's an image where
the standard basis is lousy.

111
00:07:35,000 --> 00:07:38,000
That's the basic fact,
that the standard basis which

112
00:07:38,000 --> 00:07:42,000
gives the value of every pixel
makes no use of the fact that

113
00:07:42,000 --> 00:07:47,000
we're getting a whole lot of
pixels whose gray levels -- the

114
00:07:47,000 --> 00:07:51,000
neighboring pixels tend to have
the same gray level as their

115
00:07:51,000 --> 00:07:52,000
neighbors.

116
00:07:52,000 --> 00:07:58,000
So how do we take advantage of
that fact?

117
00:07:58,000 --> 00:08:05,000
Well, one basis vector that
would be extremely nice to

118
00:08:05,000 --> 00:08:13,000
include in the basis would be a
vector of all ones.

119
00:08:13,000 --> 00:08:19,000
That's not in our standard
basis, so let me just write

120
00:08:19,000 --> 00:08:27,000
again, the standard basis is our
one, and all the rest zeroes,

121
00:08:27,000 --> 00:08:33,000
zero, one, and all the rest,
zeroes, everybody knows what

122
00:08:33,000 --> 00:08:37,000
these standard basis is.

123
00:08:37,000 --> 00:08:42,650
Now, any other basis for R --
so this is -- for this very

124
00:08:42,650 --> 00:08:47,000
high-dimensional space -- now
I'm going to speak about a

125
00:08:47,000 --> 00:08:48,000
better basis.

126
00:08:48,000 --> 00:08:54,000
Better basis -- and let me just
emphasize, one vector that would

127
00:08:54,000 --> 00:08:59,000
be extremely nice to have in
that basis is the vector of all

128
00:08:59,000 --> 00:09:00,000
ones.

129
00:09:00,000 --> 00:09:02,000
Why is that?

130
00:09:02,000 --> 00:09:07,000
Let me just say again,
because that vector of all

131
00:09:07,000 --> 00:09:12,000
ones, by itself,
one vector is able to

132
00:09:12,000 --> 00:09:17,000
completely give the information
on a solid image.

133
00:09:17,000 --> 00:09:23,000
Of course, our image won't be
solid, it will have a mix of

134
00:09:23,000 --> 00:09:26,000
solid and signal.

135
00:09:26,000 --> 00:09:31,000
So having that one vector in
the basis is going to save us a

136
00:09:31,000 --> 00:09:32,000
whole lot.

137
00:09:32,000 --> 00:09:36,000
Now, the question is,
what other vectors should be in

138
00:09:36,000 --> 00:09:37,000
the basis?

139
00:09:37,000 --> 00:09:42,000
The extreme vector in the basis
might be a vector of one minus

140
00:09:42,000 --> 00:09:45,000
one, one minus one,
one minus one.

141
00:09:45,000 --> 00:09:49,000
That would be a vector that
shows --

142
00:09:49,000 --> 00:09:53,000
I mean, that's like a
checkerboard vector,

143
00:09:53,000 --> 00:09:54,000
right?

144
00:09:54,000 --> 00:09:59,000
That's a vector that would,
if the image was like a huge

145
00:09:59,000 --> 00:10:03,000
checkerboard of plus,
minus, plus,

146
00:10:03,000 --> 00:10:07,000
minus, plus,
minus, that vector would carry

147
00:10:07,000 --> 00:10:10,000
the whole signal.

148
00:10:10,000 --> 00:10:15,000
But much more common would be
maybe to have half the image,

149
00:10:15,000 --> 00:10:18,000
darker and the other half
lighter.

150
00:10:18,000 --> 00:10:23,000
So another vector that might be
quite useful in here would be

151
00:10:23,000 --> 00:10:25,000
half ones and half minus ones.

152
00:10:25,000 --> 00:10:30,000
I'm just trying to get across
the idea of that a basis could

153
00:10:30,000 --> 00:10:35,000
be where, that first of all,
we've got the bases at our

154
00:10:35,000 --> 00:10:37,000
disposal.

155
00:10:37,000 --> 00:10:39,000
Like, we're free to choose
that.

156
00:10:39,000 --> 00:10:42,000
And it's a billion-dollar
decision what we choose.

157
00:10:42,000 --> 00:10:46,000
So, and TV people would rather
pre- would prefer one basis

158
00:10:46,000 --> 00:10:50,000
based on the way the signal is
scanned, and movie people would

159
00:10:50,000 --> 00:10:53,000
prefer another,
I mean, there's giant politics

160
00:10:53,000 --> 00:10:56,000
in this question that really
reduces to a linear algebra

161
00:10:56,000 --> 00:10:59,000
problem, what basis to choose.

162
00:10:59,000 --> 00:11:08,000
I'll just mention the best
known basis, which JPEG uses,

163
00:11:08,000 --> 00:11:15,000
-- let me put that here -- is
the Fourier basis.

164
00:11:15,000 --> 00:11:24,000
So when you use the Fourier
basis, that includes --

165
00:11:24,000 --> 00:11:29,230
this is the constant vector,
the D C vector if we're

166
00:11:29,230 --> 00:11:33,000
electrical engineers,
the l- vector of all ones,

167
00:11:33,000 --> 00:11:37,520
so it would include one,
one, one, one.

168
00:11:37,520 --> 00:11:41,000
Often eight by eight is a good
choice.

169
00:11:41,000 --> 00:11:45,000
Eight by eight is a good
choice.

170
00:11:45,000 --> 00:11:49,000
So, what do I mean by this
eight by eight?

171
00:11:49,000 --> 00:11:55,000
I mean that the big signal,
which is five twelve by five

172
00:11:55,000 --> 00:12:00,000
twelve, gets broken down,
and JPEG does this,

173
00:12:00,000 --> 00:12:03,170
into eight by eight blocks.

174
00:12:03,170 --> 00:12:08,000
And we -- sort of,
this is too much to deal with

175
00:12:08,000 --> 00:12:10,000
at once.

176
00:12:10,000 --> 00:12:14,000
So what JPEG does is take this
eight by eight block,

177
00:12:14,000 --> 00:12:17,200
which is sixty four
coefficients,

178
00:12:17,200 --> 00:12:21,000
sixty four, pixels,
and changes the basis on that

179
00:12:21,000 --> 00:12:21,000
piece.
And then, now,
let's see, I was going to write

180
00:12:25,000 --> 00:12:29,000
down Fourier,
so you remember Fourier as this

181
00:12:29,000 --> 00:12:33,000
vector of all ones,
and then, the vector --

182
00:12:33,000 --> 00:12:38,000
oh, well, actually,
I gave a lecture earlier about

183
00:12:38,000 --> 00:12:43,000
the Fourier matrix,
this matrix whose columns are

184
00:12:43,000 --> 00:12:46,000
powers of a complex number w.

185
00:12:46,000 --> 00:12:52,000
I won't repeat that,
because I don't want to go into

186
00:12:52,000 --> 00:12:57,000
the details of the Fourier
basis, just to tell you how

187
00:12:57,000 --> 00:13:00,000
compression works.

188
00:13:00,000 --> 00:13:02,000
So what happens in JPEG?

189
00:13:02,000 --> 00:13:05,580
What happens to the video,
to each image,

190
00:13:05,580 --> 00:13:07,000
of these lectures?

191
00:13:07,000 --> 00:13:10,000
It gets broken into eight by
eight blocks.

192
00:13:10,000 --> 00:13:10,000
OK.
Within each block,
we have sixty four

193
00:13:13,000 --> 00:13:16,000
coefficients,
sixty four basis vectors,

194
00:13:16,000 --> 00:13:20,000
sixty four pixels,
and we change basis in sixty

195
00:13:20,000 --> 00:13:25,000
four dimensional space using
these Fourier vectors.

196
00:13:25,000 --> 00:13:33,000
Just note, that was a lossless
step.

197
00:13:33,000 --> 00:13:36,000
Let me emphasize.

198
00:13:36,000 --> 00:13:41,000
In comes the signal x.

199
00:13:41,000 --> 00:13:44,000
We change basis.

200
00:13:44,000 --> 00:13:50,000
This is the basis change.

201
00:13:50,000 --> 00:13:54,000
Change basis.

202
00:13:54,000 --> 00:13:56,000
Choose a better basis.

203
00:13:56,000 --> 00:14:00,000
So it produces,
the coefficients c.

204
00:14:00,000 --> 00:14:06,000
So sixty four pixels come in,
sixty four coefficients come

205
00:14:06,000 --> 00:14:07,000
out.

206
00:14:07,000 --> 00:14:10,000
Now comes the compression.

207
00:14:10,000 --> 00:14:13,000
Now come -- this was lossless.

208
00:14:13,000 --> 00:14:19,000
It's just -- we know that R --
R sixty four has plenty of

209
00:14:19,000 --> 00:14:23,000
bases, and we've chosen one.

210
00:14:23,000 --> 00:14:28,000
Now, in that basis,
we write the signal in that

211
00:14:28,000 --> 00:14:33,000
basis, and that's what my
lecture -- that's the math part

212
00:14:33,000 --> 00:14:35,000
of my lecture.

213
00:14:35,000 --> 00:14:38,000
Now here's the application
part.

214
00:14:38,000 --> 00:14:43,000
The next part is going to be
the compression step.

215
00:14:43,000 --> 00:14:44,000
And that's lossy.

216
00:14:44,000 --> 00:14:48,000
We're going to lose
information.

217
00:14:48,000 --> 00:14:54,000
And what will actually happen
at that step?

218
00:14:54,000 --> 00:15:02,000
Well, one thing we could do is
just throw away the small

219
00:15:02,000 --> 00:15:04,000
coefficients.

220
00:15:04,000 --> 00:15:13,000
So that's called thresholding,
we set some threshold.

221
00:15:13,000 --> 00:15:16,000
Every coefficient,
every basis vector that's not

222
00:15:16,000 --> 00:15:20,000
in there more than the threshold
value, and we set them threshold

223
00:15:20,000 --> 00:15:23,000
so that our eye can't see the
difference, or can hardly see

224
00:15:23,000 --> 00:15:26,000
the difference,
whether we throw away that

225
00:15:26,000 --> 00:15:28,860
little bit of that basis vector
or keep it.

226
00:15:28,860 --> 00:15:32,070
So this compression step
produces a compressed set of

227
00:15:32,070 --> 00:15:32,000
coefficients.

228
00:15:32,000 --> 00:15:35,000
I'll just keep going here.

229
00:15:35,000 --> 00:15:39,000
So it keeps going,
this compression step produces

230
00:15:39,000 --> 00:15:41,000
some coefficient c hat.

231
00:15:41,000 --> 00:15:43,000
And with many zeroes.

232
00:15:43,000 --> 00:15:47,270
So that's where the compression
came.

233
00:15:47,270 --> 00:15:52,000
Probably, there is enough of
this vector of all ones -- we

234
00:15:52,000 --> 00:15:55,000
very seldom throw that away.

235
00:15:55,000 --> 00:15:59,000
Usually, its coefficient will
be large.

236
00:15:59,000 --> 00:16:03,000
But the coefficient of
something like this,

237
00:16:03,000 --> 00:16:08,000
that quickly alternative
vector, there's probably very

238
00:16:08,000 --> 00:16:12,000
little of that in any smooth
signal.

239
00:16:12,000 --> 00:16:16,000
That's high-frequency -- this
is low-frequency,

240
00:16:16,000 --> 00:16:18,000
zero frequency.

241
00:16:18,000 --> 00:16:23,000
This stuff is the highest
frequency we could have,

242
00:16:23,000 --> 00:16:27,000
and if the noise,
the jitter is producing that

243
00:16:27,000 --> 00:16:31,140
sort of output,
but a smooth lecture like this

244
00:16:31,140 --> 00:16:35,000
one is, has very little of that
highest frequency,

245
00:16:35,000 --> 00:16:39,000
very little noise in this
lecture.

246
00:16:39,000 --> 00:16:44,000
OK, so we throw away whatever
there is, and we're left with

247
00:16:44,000 --> 00:16:48,000
just a few coefficients,
and then we reconstruct a

248
00:16:48,000 --> 00:16:51,160
signal using those coefficients.

249
00:16:51,160 --> 00:16:55,000
We take those coefficients,
times their basis vectors,

250
00:16:55,000 --> 00:16:59,000
but this sum doesn't have sixty
four terms any more.

251
00:16:59,000 --> 00:17:04,000
Probably, it has about two or
three terms.

252
00:17:04,000 --> 00:17:06,760
So that would -- say it has
three terms.

253
00:17:06,760 --> 00:17:10,000
From sixty four down to three,
that's compression of twenty

254
00:17:10,000 --> 00:17:11,000
one to one.

255
00:17:11,000 --> 00:17:14,000
That's the kind of compression
you're looking for.

256
00:17:14,000 --> 00:17:17,000
And everybody is looking for
that sort of compression.

257
00:17:17,000 --> 00:17:20,000
Let's see, I guess I met the
problem with the FBI and

258
00:17:20,000 --> 00:17:22,000
fingerprints.

259
00:17:22,000 --> 00:17:27,000
So there's a whole lot of still
images.

260
00:17:27,000 --> 00:17:34,000
You know, with your thumb,
you make these inky marks which

261
00:17:34,000 --> 00:17:40,000
go somewhere.
it used to go to Washington and

262
00:17:40,000 --> 00:17:44,760
get stored in a big file.

263
00:17:44,760 --> 00:17:48,000
So Washington had a file of
thirty million murderers,

264
00:17:48,000 --> 00:17:50,910
cheaters on quizzes,
other stuff,

265
00:17:50,910 --> 00:17:53,000
and actually,
there was no way to retrieve

266
00:17:53,000 --> 00:17:54,000
them in time.

267
00:17:54,000 --> 00:17:58,450
So suppose you're at the police
station, they say,

268
00:17:58,450 --> 00:18:02,000
OK, this person may have done
this, check with Washington,

269
00:18:02,000 --> 00:18:07,000
have they got -- are his or her
fingerprints on file?

270
00:18:07,000 --> 00:18:11,000
Well, Washington won't know the
answer within a week if it's got

271
00:18:11,000 --> 00:18:14,000
filing cabinets full of
fingerprints.

272
00:18:14,000 --> 00:18:17,000
So of course,
the natural step is digitizing.

273
00:18:17,000 --> 00:18:22,000
So all fingerprints are now
digitized, so now it's at least

274
00:18:22,000 --> 00:18:26,000
electronic, but still there's
too much information in each

275
00:18:26,000 --> 00:18:27,000
one.

276
00:18:27,000 --> 00:18:32,000
I mean, you can't search
through that many,

277
00:18:32,000 --> 00:18:39,500
fingerprints if the digital
image is five twelve squared by

278
00:18:39,500 --> 00:18:45,000
five twelve squared,
if it's that many pixels.

279
00:18:45,000 --> 00:18:48,000
So you get compressed.

280
00:18:48,000 --> 00:18:54,000
So the FBI had to decide what
basis to choose for compression

281
00:18:54,000 --> 00:18:56,000
of fingerprints.

282
00:18:56,000 --> 00:19:02,000
And then they built a big new
facility in West Virginia,

283
00:19:02,000 --> 00:19:07,000
and that's where fingerprints
now are sent.

284
00:19:07,000 --> 00:19:11,000
So I think, if you get your
fingerprints done now at the

285
00:19:11,000 --> 00:19:13,820
police station,
if it's an up-to-date police

286
00:19:13,820 --> 00:19:17,000
station, it happens digitally,
and the signal is sent

287
00:19:17,000 --> 00:19:20,000
digitally, and then in West
Virginia, it's compressed and

288
00:19:20,000 --> 00:19:21,000
indexed.

289
00:19:21,000 --> 00:19:24,000
And then, if they want to find
you, they can do it within

290
00:19:24,000 --> 00:19:27,000
minutes instead of within a
week.

291
00:19:27,000 --> 00:19:28,000
OK.

292
00:19:28,000 --> 00:19:33,000
So this compression comes up
for signals, for images,

293
00:19:33,000 --> 00:19:38,000
for video -- which is,
like these lectures -- there's

294
00:19:38,000 --> 00:19:39,000
another aspect.

295
00:19:39,000 --> 00:19:45,000
You could treat the video as
one still image after another

296
00:19:45,000 --> 00:19:50,000
one, and compress each one,
and then run them and make a

297
00:19:50,000 --> 00:19:51,000
video.

298
00:19:51,000 --> 00:19:58,000
But that misses --
well, you can see why that's

299
00:19:58,000 --> 00:19:59,780
not optimal.

300
00:19:59,780 --> 00:20:06,000
In a video thing,
you have a sequence of images,

301
00:20:06,000 --> 00:20:13,000
so video is really a sequence
of images but what about one

302
00:20:13,000 --> 00:20:16,000
image to the next image?

303
00:20:16,000 --> 00:20:21,000
They're extremely correlated.

304
00:20:21,000 --> 00:20:25,000
I mean that I'm getting an
image every split-second,

305
00:20:25,000 --> 00:20:27,000
and also, I'm moving slightly.

306
00:20:27,000 --> 00:20:31,930
That's what's producing the,
jumpy motion on the video.

307
00:20:31,930 --> 00:20:35,000
But I'm not,
like, you know -- each image in

308
00:20:35,000 --> 00:20:39,000
the sequence is pretty close to
the one before.

309
00:20:39,000 --> 00:20:42,000
So you have to use,
like, prediction and

310
00:20:42,000 --> 00:20:43,000
correction.

311
00:20:43,000 --> 00:20:48,000
I mean, the image of me one
instant -- one time-step later,

312
00:20:48,000 --> 00:20:52,560
you would assume would be the
same, and then plus a small

313
00:20:52,560 --> 00:20:53,450
correction.

314
00:20:53,450 --> 00:20:57,000
And you would only code and
digitize the correction,

315
00:20:57,000 --> 00:21:00,000
and compress the correction.

316
00:21:00,000 --> 00:21:06,000
So a sequence of images that's
highly correlated and the

317
00:21:06,000 --> 00:21:12,000
problem in compression is always
to use this correlation,

318
00:21:12,000 --> 00:21:15,750
this fact that,
in time, or in space,

319
00:21:15,750 --> 00:21:21,000
things don't change instantly,
they're very often smooth

320
00:21:21,000 --> 00:21:25,000
changes, and,
you can predict one value from

321
00:21:25,000 --> 00:21:28,000
the previous value.

322
00:21:28,000 --> 00:21:29,000
OK.

323
00:21:29,000 --> 00:21:36,000
So those are applications which
are pure linear algebra.

324
00:21:36,000 --> 00:21:41,000
I could, well,
maybe you'll allow me to tell

325
00:21:41,000 --> 00:21:48,000
you, and the book describes,
the new basis that's the

326
00:21:48,000 --> 00:21:52,000
competition for Fourier.

327
00:21:52,000 --> 00:21:55,000
So the competition for Fourier
is called wavelets,

328
00:21:55,000 --> 00:21:58,000
and I can describe what that
basis is like,

329
00:21:58,000 --> 00:22:01,000
say, in the eight by eight
case.

330
00:22:01,000 --> 00:22:05,000
So the eight by eight wavelet
basis is the vector of all ones,

331
00:22:05,000 --> 00:22:09,000
eight ones, then the vector of
four ones and four minus ones,

332
00:22:09,000 --> 00:22:13,000
then the vector of two ones,
and two minus ones,

333
00:22:13,000 --> 00:22:15,400
and four zeroes.

334
00:22:15,400 --> 00:22:24,000
And also the vector of four
zeroes and two ones and two

335
00:22:24,000 --> 00:22:26,000
minus ones.

336
00:22:26,000 --> 00:22:34,000
So now I'm up to four,
and I need four more,

337
00:22:34,000 --> 00:22:35,000
right?

338
00:22:35,000 --> 00:22:37,000
For R^8?

339
00:22:37,000 --> 00:22:43,000
The next basis vector will be
one minus one and six zeroes,

340
00:22:43,000 --> 00:22:48,000
and then three more like that,
with the one minus one there,

341
00:22:48,000 --> 00:22:50,000
and there, and there.

342
00:22:50,000 --> 00:22:55,000
So those are eight vectors in
eight-dimensional space,

343
00:22:55,000 --> 00:23:00,000
those are called wavelets,
and it's a very simple

344
00:23:00,000 --> 00:23:04,000
wavelet choice,
it's a more sophisticated

345
00:23:04,000 --> 00:23:04,000
choice.
This is a little jumpy,
to jump between one and minus

346
00:23:08,000 --> 00:23:09,000
one.

347
00:23:09,000 --> 00:23:11,000
And, actually,
you can see,

348
00:23:11,000 --> 00:23:15,000
now, suppose you compare the
wavelet basis with the Fourier

349
00:23:15,000 --> 00:23:16,000
basis above.

350
00:23:16,000 --> 00:23:21,380
How could I write this guy,
which is in the Fourier basis,

351
00:23:21,380 --> 00:23:25,460
it's an eight --
it's a vector in R^8.

352
00:23:25,460 --> 00:23:29,000
How would I write that as a
combination of the wavelet

353
00:23:29,000 --> 00:23:30,000
basis?

354
00:23:30,000 --> 00:23:34,000
Have I told you enough about
the wavelet basis that you can

355
00:23:34,000 --> 00:23:39,000
see, how does this very fast guy
-- what combination of the

356
00:23:39,000 --> 00:23:42,160
wavelet basis is that very fast
guy?

357
00:23:42,160 --> 00:23:46,000
It would be this one -- it
would be the sum of these four,

358
00:23:46,000 --> 00:23:48,000
right?

359
00:23:48,000 --> 00:23:51,000
That very fast guy will be that
one minus one,

360
00:23:51,000 --> 00:23:53,000
and the next one,
and the next one,

361
00:23:53,000 --> 00:23:54,000
and the next one.

362
00:23:54,000 --> 00:23:57,000
So this is the sum of those
last four wavelets.

363
00:23:57,000 --> 00:23:59,000
This one, we've kept,
and so on.

364
00:23:59,000 --> 00:24:02,000
So, each -- well,
every -- well,

365
00:24:02,000 --> 00:24:03,000
that's what a basis does.

366
00:24:03,000 --> 00:24:07,000
Every vector in R^8 is some
combination of those,

367
00:24:07,000 --> 00:24:14,000
and for the linear algebra --
so the linear algebra is this

368
00:24:14,000 --> 00:24:18,000
step, find the coefficient.

369
00:24:18,000 --> 00:24:23,000
That's the step we want to
take.

370
00:24:23,000 --> 00:24:31,000
What if I give you the basis,
like this wavelet basis,

371
00:24:31,000 --> 00:24:38,000
and I give you the pixel --
so here are the pixel values,

372
00:24:38,000 --> 00:24:41,000
P1, P2, down to P8 -- what's
the job?

373
00:24:41,000 --> 00:24:43,000
What's the linear algebra here?

374
00:24:43,000 --> 00:24:46,000
So these are the values,
this is in the standard basis,

375
00:24:46,000 --> 00:24:47,000
right?

376
00:24:47,000 --> 00:24:50,590
Those are just the values at
eight successive points.

377
00:24:50,590 --> 00:24:53,000
I guess I'm dropping down to
one dimension,

378
00:24:53,000 --> 00:24:57,000
instead of eight by eight,
I'm just going to take eight

379
00:24:57,000 --> 00:25:00,000
pixel values along that first
top row.

380
00:25:00,000 --> 00:25:02,000
So what do I want to do?

381
00:25:02,000 --> 00:25:07,000
In standard basis,
here are the pixel values.

382
00:25:07,000 --> 00:25:12,000
I want to write that as a
combination of c1 times this

383
00:25:12,000 --> 00:25:17,000
guy, plus c2 times this guy,
plus c3, these are the

384
00:25:17,000 --> 00:25:20,000
coefficients,
plus c4 times this one -- do

385
00:25:20,000 --> 00:25:24,000
you see what I'm doing?

386
00:25:24,000 --> 00:25:32,000
I want to write this vector P
as a combination of c1 times the

387
00:25:32,000 --> 00:25:39,000
first wavelet plus c8 times the
eighth wavelet.

388
00:25:39,000 --> 00:25:42,000
That's the transform step.

389
00:25:42,000 --> 00:25:47,000
That's the lossless step.

390
00:25:47,000 --> 00:25:51,000
That's the step from P -- oh,
I'm calling it P here,

391
00:25:51,000 --> 00:25:56,000
and I called it x there,
so let me -- at the risk of

392
00:25:56,000 --> 00:26:01,000
moving, and therefore making
this jumpy -- suppose the signal

393
00:26:01,000 --> 00:26:04,920
I'm now calling P,
that a pixel values,

394
00:26:04,920 --> 00:26:08,000
and I'm looking for the
coefficients.

395
00:26:08,000 --> 00:26:11,000
OK, tell me how to do it.

396
00:26:11,000 --> 00:26:14,000
If I give you eight basis
vectors, and I give you the

397
00:26:14,000 --> 00:26:17,000
input signal,
and I ask for the coefficients,

398
00:26:17,000 --> 00:26:18,000
what do I do?

399
00:26:18,000 --> 00:26:19,000
What's the step?

400
00:26:19,000 --> 00:26:22,000
I'm trying to solve this,
I want to know the eight

401
00:26:22,000 --> 00:26:24,000
coefficients,
so I'm changing from the

402
00:26:24,000 --> 00:26:27,390
standard basis,
which is just the eight

403
00:26:27,390 --> 00:26:31,000
gray-scale values to the wavelet
basis, where the same vector is

404
00:26:31,000 --> 00:26:34,000
represented by eight numbers.

405
00:26:34,000 --> 00:26:43,000
It's got to take eight numbers
to tell you a vector in R^8,

406
00:26:43,000 --> 00:26:51,000
and those eight numbers are the
coefficients of the basis.

407
00:26:51,000 --> 00:26:58,000
Look, we've done this thing
before.

408
00:26:58,000 --> 00:27:06,000
There is the equation in vector
notation, we want to see it as a

409
00:27:06,000 --> 00:27:07,000
matrix.

410
00:27:07,000 --> 00:27:14,000
This is a combination of
columns of the wavelet matrix,

411
00:27:14,000 --> 00:27:14,000
right?
This is P equals c1,
c2, down to c8,

412
00:27:19,000 --> 00:27:24,000
and these guys are the columns.

413
00:27:24,000 --> 00:27:28,000
I mean, this is the step that
we're constantly taking in this

414
00:27:28,000 --> 00:27:32,000
course, the first basis vector
goes in the first column,

415
00:27:32,000 --> 00:27:36,000
the second basis vector goes in
the second column,

416
00:27:36,000 --> 00:27:40,000
and so on, the eight columns of
this wavelet matrix are the

417
00:27:40,000 --> 00:27:41,000
eight basis vectors.

418
00:27:41,000 --> 00:27:43,930
This is a wavelet matrix W.

419
00:27:43,930 --> 00:27:50,150
So, the step to change basis --
so now I'm finally coming to

420
00:27:50,150 --> 00:27:55,730
this change-of-basis,
so the change of basis that,

421
00:27:55,730 --> 00:28:00,000
let me stay with this board,
but -- well,

422
00:28:00,000 --> 00:28:03,000
let me just go above it,
here.

423
00:28:03,000 --> 00:28:09,000
So the standard basis,
we know, the wavelet basis we

424
00:28:09,000 --> 00:28:16,000
have here, and the transform is
simply, solve the equations,

425
00:28:16,000 --> 00:28:16,000
P=W C.
So the coefficients
are W inverse P.

426
00:28:22,000 --> 00:28:23,000
Right.

427
00:28:23,000 --> 00:28:26,000
This shows a critical point.

428
00:28:26,000 --> 00:28:31,000
A good basis has a nice,
fast, inverse.

429
00:28:31,000 --> 00:28:34,210
So good basis means what?

430
00:28:34,210 --> 00:28:34,000
Eh?

431
00:28:34,000 --> 00:28:40,180
So this is like the
billion-dollar competition,

432
00:28:40,180 --> 00:28:42,860
and it's not over yet.

433
00:28:42,860 --> 00:28:51,000
People are going to come up
with better bases than these.

434
00:28:51,000 --> 00:28:55,000
So a good basis will be,
first good thing would be fast.

435
00:28:55,000 --> 00:29:00,000
I have to be able to multiply
by W fast, and multiply by W --

436
00:29:00,000 --> 00:29:01,000
by its inverse fast.

437
00:29:01,000 --> 00:29:06,000
That's -- if a basis doesn't
allow you to do that fast,

438
00:29:06,000 --> 00:29:11,000
then it's going to take so much
time that you can't afford it.

439
00:29:11,000 --> 00:29:15,980
So these bases -- the Fourier
basis, everybody said,

440
00:29:15,980 --> 00:29:20,000
OK, I know how to deal quickly
with the Fourier basis,

441
00:29:20,000 --> 00:29:24,000
because we have something
called the Fast Fourier

442
00:29:24,000 --> 00:29:25,260
Transform.

443
00:29:25,260 --> 00:29:29,000
So there's a FFT that came in
my earlier lecture,

444
00:29:29,000 --> 00:29:33,000
and comes in the last chapter
of the

445
00:29:33,000 --> 00:29:37,890
book, so change-of-basis is
done -- if, for the Fourier

446
00:29:37,890 --> 00:29:43,000
basis, it's done fast by the FFT
and there's a fast wavelet

447
00:29:43,000 --> 00:29:43,000
transform.
I can change,
for this wavelet example,

448
00:29:47,000 --> 00:29:49,000
this matrix is easy to invert.

449
00:29:49,000 --> 00:29:55,000
It's just somebody had a smart
idea in choosing that wavelet

450
00:29:55,000 --> 00:30:00,000
basis and inverting it,
it has a nice inverse.

451
00:30:00,000 --> 00:30:02,000
Actually, you can see why it
has a nice inverse.

452
00:30:02,000 --> 00:30:05,000
Do you see any property of
these eight basis vectors?

453
00:30:05,000 --> 00:30:09,080
Well, I've only written five of
them, but if you see that

454
00:30:09,080 --> 00:30:12,000
property for those five,
you'll see it for the three

455
00:30:12,000 --> 00:30:12,000
remaining.
Well, if I give you those eight
vectors and ask,

456
00:30:15,000 --> 00:30:17,000
what's a nice property?

457
00:30:17,000 --> 00:30:22,580
Well, you would say,
first, they're all ones and

458
00:30:22,580 --> 00:30:25,000
minus ones and zeroes.

459
00:30:25,000 --> 00:30:31,000
So every multiplication is very
fast using -- just in binary.

460
00:30:31,000 --> 00:30:37,000
But what's the other great
property of those vectors?

461
00:30:37,000 --> 00:30:40,000
Anybody see it?

462
00:30:40,000 --> 00:30:42,000
So, of course,
when I think about a basis,

463
00:30:42,000 --> 00:30:45,000
one nice property -- I don't
have to have it,

464
00:30:45,000 --> 00:30:48,000
but I'm happy if it's there --
is that they're orthogonal.

465
00:30:48,000 --> 00:30:51,000
If the basis vectors are
orthogonal, then I'm in good

466
00:30:51,000 --> 00:30:52,000
shape.

467
00:30:52,000 --> 00:30:53,000
And these are...
do you see?

468
00:30:53,000 --> 00:30:57,000
Take the dot product of that
with that, you get four plus

469
00:30:57,000 --> 00:31:00,000
ones and four minus ones,
you get zero.

470
00:31:00,000 --> 00:31:03,000
Take the dot product of that
with that.

471
00:31:03,000 --> 00:31:07,000
You get two plus ones and two
minus ones.

472
00:31:07,000 --> 00:31:10,000
Or the dot product of that with
that.

473
00:31:10,000 --> 00:31:13,340
Two plus ones and two minus
ones.

474
00:31:13,340 --> 00:31:17,960
You can easily check that
that's an orthogonal basis.

475
00:31:17,960 --> 00:31:20,000
It's not orthonormal.

476
00:31:20,000 --> 00:31:23,000
To fix it up,
I should divide by the length,

477
00:31:23,000 --> 00:31:25,000
to make them unit vectors.

478
00:31:25,000 --> 00:31:26,000
Let's suppose I do that.

479
00:31:26,000 --> 00:31:29,490
So somewhere in here,
I've got to account for the

480
00:31:29,490 --> 00:31:32,000
fact that this has length square
root of eight,

481
00:31:32,000 --> 00:31:35,000
that has length square root of
four, that has length square

482
00:31:35,000 --> 00:31:36,000
root of two.

483
00:31:36,000 --> 00:31:40,000
But that's just a constant
factor that's easy to --

484
00:31:40,000 --> 00:31:44,000
so suppose we've done that.

485
00:31:44,000 --> 00:31:48,000
Then, tell me what's W inverse?

486
00:31:48,000 --> 00:31:54,000
That's what chapter four,
section four point four was

487
00:31:54,000 --> 00:31:55,000
about.

488
00:31:55,000 --> 00:32:03,000
If we have orthonormal columns
then the inverse is the same as

489
00:32:03,000 --> 00:32:06,000
the transpose.

490
00:32:06,000 --> 00:32:09,000
So if we have a fast way to
multiply by W,

491
00:32:09,000 --> 00:32:12,000
which we do,
the inverse is going to look

492
00:32:12,000 --> 00:32:16,000
just the same,
and we'll have a fast way to do

493
00:32:16,000 --> 00:32:16,000
W inverse.
So that's the wavelet basis
passes this requirement for

494
00:32:20,000 --> 00:32:21,000
fast.

495
00:32:21,000 --> 00:32:22,000
We can use it fast.

496
00:32:22,000 --> 00:32:27,000
But there's a second
requirement, is it any good?

497
00:32:27,000 --> 00:32:31,000
Because the the very fastest
thing we could do is not to

498
00:32:31,000 --> 00:32:32,000
change basis at all.

499
00:32:32,000 --> 00:32:33,000
Right?

500
00:32:33,000 --> 00:32:36,000
The fastest thing would be,
OK, stay with the standard

501
00:32:36,000 --> 00:32:39,000
basis, stay with eight pixel
values.

502
00:32:39,000 --> 00:32:42,000
But that was poor from
compression point of view,

503
00:32:42,000 --> 00:32:42,000
right?
Those eight pixel values,
if I just took those eight

504
00:32:46,000 --> 00:32:50,030
numbers, I can't throw some of
those away.

505
00:32:50,030 --> 00:32:54,000
If I throw away ninety percent
-- if I compress ten to one,

506
00:32:54,000 --> 00:32:57,000
and throw away ninety percent
of my pixel values,

507
00:32:57,000 --> 00:33:00,290
well, my picture's just gone
dark.

508
00:33:00,290 --> 00:33:04,000
Whereas, the basis that was
good, the wavelet basis or the

509
00:33:04,000 --> 00:33:06,000
Fourier basis,
if I throw away c5,

510
00:33:06,000 --> 00:33:10,000
c6, c7, and c8,
all I'm throwing away is little

511
00:33:10,000 --> 00:33:15,000
blips that are probably there in
very small amounts.

512
00:33:15,000 --> 00:33:23,000
So the second property that we
need is good compression.

513
00:33:23,000 --> 00:33:30,000
So first, it has to be fast,
and secondly,

514
00:33:30,000 --> 00:33:38,500
a few basis vectors should come
close to the signal.

515
00:33:38,500 --> 00:33:42,000
So a few is enough.

516
00:33:42,000 --> 00:33:44,500
Can I write it that way?

517
00:33:44,500 --> 00:33:48,000
A few basis vectors are enough
to reproduce the image just

518
00:33:48,000 --> 00:33:52,000
exactly as on a video of these
18.06 lectures.

519
00:33:52,000 --> 00:33:55,930
Uh, I don't know what the
compression rate is,

520
00:33:55,930 --> 00:33:59,000
I'll ask, David,
who does the compression --

521
00:33:59,000 --> 00:34:02,000
and, by the way,
I'll try to get the lectures,

522
00:34:02,000 --> 00:34:07,000
that are relevant for the quiz
up onto the Web in time.

523
00:34:07,000 --> 00:34:11,000
So I'll send them a message
today.

524
00:34:11,000 --> 00:34:18,000
So, he's using the Fourier
basis because the JPEG -- so

525
00:34:18,000 --> 00:34:24,000
JPEG two thousand,
which will be the next standard

526
00:34:24,000 --> 00:34:30,000
for image compression,
will include wavelets.

527
00:34:30,000 --> 00:34:34,000
So, I mean, you're actually
getting a kind of up-to-date,

528
00:34:34,000 --> 00:34:40,000
picture of where this big world
of signal and image processing

529
00:34:40,000 --> 00:34:40,000
is.
That Fourier is what everybody
knew, and what people

530
00:34:44,000 --> 00:34:48,000
automatically used,
and the new one is wavelets,

531
00:34:48,000 --> 00:34:53,000
where this is the simplest set
of wavelets.

532
00:34:53,000 --> 00:34:58,000
And this isn't the one that the
FBI uses, by the way,

533
00:34:58,000 --> 00:35:04,000
the FBI uses a smoother
wavelet, instead of jumping from

534
00:35:04,000 --> 00:35:07,000
one to minus one,
it's a smooth,

535
00:35:07,000 --> 00:35:11,000
Cutoff.
and, that's what we'll be in in

536
00:35:11,000 --> 00:35:13,000
JPEG two thousand.

537
00:35:13,000 --> 00:35:17,000
OK, so that's that application.

538
00:35:17,000 --> 00:35:23,000
Now, let me come to the math,
the linear algebra part of the

539
00:35:23,000 --> 00:35:24,000
lecture.

540
00:35:24,000 --> 00:35:29,000
Well, we've actually seen a
change-of-basis.

541
00:35:29,000 --> 00:35:33,000
So let -- let me just review
that

542
00:35:33,000 --> 00:35:39,000
eh-eh change-of-basis idea,
and then the i- and then the

543
00:35:39,000 --> 00:35:42,000
transformation to a matrix.

544
00:35:42,000 --> 00:35:42,000
OK.
So this, I hope you see that
these applications are really

545
00:35:48,000 --> 00:35:49,000
big.

546
00:35:49,000 --> 00:35:54,000
Now, I have to talk a little
about change-of-basis,

547
00:35:54,000 --> 00:35:56,000
and a little about that.

548
00:35:56,000 --> 00:35:58,000
The matrix.

549
00:35:58,000 --> 00:35:58,000
OK.
OK.

550
00:36:00,000 --> 00:36:00,000
OK.
So change-of-basis.

551
00:36:02,000 --> 00:36:10,000
Basically, forgive that put,
OK, I have, I have my vector in

552
00:36:10,000 --> 00:36:16,000
one basis, and I want to change
to a different one.

553
00:36:16,000 --> 00:36:21,000
Actually, you saw it for the
wavelet case.

554
00:36:21,000 --> 00:36:29,000
So I need the -- let the matrix
W, and the columns of W be the

555
00:36:29,000 --> 00:36:33,000
new basis vectors.

556
00:36:33,000 --> 00:36:41,000
Then the change-of-basis
involves, just as it did there,

557
00:36:41,000 --> 00:36:43,000
W inverse.

558
00:36:43,000 --> 00:36:50,000
So we have the vector,
say, x, in the old basis,

559
00:36:50,000 --> 00:36:56,000
and that converts to a vector,
let's say, c,

560
00:36:56,000 --> 00:37:03,000
in the new basis,
and the relation is exactly

561
00:37:03,000 --> 00:37:10,050
what we had there,
that x is W c.

562
00:37:10,050 --> 00:37:16,000
That's the step we have to
take.

563
00:37:16,000 --> 00:37:25,000
There's a matrix W that gives
us a change-of-basis.

564
00:37:25,000 --> 00:37:26,000
OK.

565
00:37:26,000 --> 00:37:35,000
What I want to do is think
about transformations on

566
00:37:35,000 --> 00:37:39,000
matrices.

567
00:37:39,000 --> 00:37:45,000
So here's the question to
complete this lecture.

568
00:37:45,000 --> 00:37:51,000
Suppose I have a linear
transformation T.

569
00:37:51,000 --> 00:37:59,000
So we would think of it as an
eight -- as a n by n matrix.

570
00:37:59,000 --> 00:38:05,000
And it's computed with respect
to a certain basis.

571
00:38:05,000 --> 00:38:07,000
So T -- no, I'm sorry.

572
00:38:07,000 --> 00:38:12,000
I've got the transformation T,
period.

573
00:38:12,000 --> 00:38:18,000
That's taking eight-dimensional
space to eight-dimensional

574
00:38:18,000 --> 00:38:19,000
space.

575
00:38:19,000 --> 00:38:23,000
Now, let's get matrices in
there.

576
00:38:23,000 --> 00:38:24,000
OK.

577
00:38:24,000 --> 00:38:33,000
So, with respect to a first
basis, say v1 up to v8,

578
00:38:33,000 --> 00:38:36,000
it has a matrix A.

579
00:38:36,000 --> 00:38:42,000
I'm just setting up letters
here.

580
00:38:42,000 --> 00:38:52,000
With respect to a second basis,
say, I'll make it u1 up to --

581
00:38:52,000 --> 00:38:59,000
or w1, since I've used (w)s,
w1 up to w8,

582
00:38:59,000 --> 00:39:04,000
it has a matrix B.

583
00:39:04,000 --> 00:39:09,340
And my question is,
what's the connection between A

584
00:39:09,340 --> 00:39:09,000
and B?

585
00:39:09,000 --> 00:39:15,000
How is the matrix -- the
transformation T is settled.

586
00:39:15,000 --> 00:39:17,000
We could say,
it's a rotation,

587
00:39:17,000 --> 00:39:19,000
for example.

588
00:39:19,000 --> 00:39:22,000
So that would be one
transformation of

589
00:39:22,000 --> 00:39:27,000
eight-dimensional space,
just spin it a little.

590
00:39:27,000 --> 00:39:29,940
Or project it.

591
00:39:29,940 --> 00:39:33,000
Or whatever linear
transformation we've got.

592
00:39:33,000 --> 00:39:38,000
Now, we have to remember -- my
first step is to remind you how

593
00:39:38,000 --> 00:39:40,000
you create that matrix A.

594
00:39:40,000 --> 00:39:44,000
Then my second step is,
we would use the same method to

595
00:39:44,000 --> 00:39:49,000
create B, but because it came
from the same transformation,

596
00:39:49,000 --> 00:39:53,000
there's got to be a relation
between A and B.

597
00:39:53,000 --> 00:39:57,000
What's the relation between A
and B?

598
00:39:57,000 --> 00:40:01,000
And let me jump to the answer
on that one.

599
00:40:01,000 --> 00:40:05,000
That if I have the same
transformation,

600
00:40:05,000 --> 00:40:09,350
and I'm compute on its matrix
in one basis,

601
00:40:09,350 --> 00:40:13,000
and then I computer it in
another basis,

602
00:40:13,000 --> 00:40:17,000
those two matrices are similar.

603
00:40:17,000 --> 00:40:22,000
So these two matrices are
similar.

604
00:40:22,000 --> 00:40:28,000
Now, do you remember what
similar matrices meant?

605
00:40:28,000 --> 00:40:30,000
Similar.

606
00:40:30,000 --> 00:40:36,000
A is similar to -- the two
matrices are similar.

607
00:40:36,000 --> 00:40:37,000
Similar.

608
00:40:37,000 --> 00:40:42,000
And what do I mean by that?

609
00:40:42,000 --> 00:40:48,000
I mean that I take the matrix
B, and I can compute it from the

610
00:40:48,000 --> 00:40:53,000
matrix A using some similarity,
some matrix M on one side,

611
00:40:53,000 --> 00:40:56,000
and M inverse on the other.

612
00:40:56,000 --> 00:41:00,000
And this M will be the
change-of-basis matrix.

613
00:41:00,000 --> 00:41:06,030
This part of the lecture is,
admittedly, compressed.

614
00:41:06,030 --> 00:41:11,000
What I wanted you to -- it's
really the conclusion that I

615
00:41:11,000 --> 00:41:13,000
want you to spot.

616
00:41:13,000 --> 00:41:19,000
Now, I have to go back and say,
what does it mean for A to be

617
00:41:19,000 --> 00:41:24,000
the matrix of this
transformation T.

618
00:41:24,000 --> 00:41:29,000
So I have to remind you what
that meant, that was in the last

619
00:41:29,000 --> 00:41:30,000
lecture.

620
00:41:30,000 --> 00:41:34,000
Then this is the conclusion
that if I change to a different

621
00:41:34,000 --> 00:41:39,360
basis, we now know -- see,
if I change to a different

622
00:41:39,360 --> 00:41:41,000
basis, two things happen.

623
00:41:41,000 --> 00:41:44,000
Every vector has new
coordinates.

624
00:41:44,000 --> 00:41:49,080
There, the rule is this one,
between the old coordinates and

625
00:41:49,080 --> 00:41:49,980
the new ones.

626
00:41:49,980 --> 00:41:53,000
Every matrix changes,
every transformation has a new

627
00:41:53,000 --> 00:41:53,000
matrix.
And the new matrix is related
this way, the M could be the

628
00:41:57,000 --> 00:41:58,000
same as the W.

629
00:41:58,000 --> 00:42:01,000
The M there would be the W
here.

630
00:42:01,000 --> 00:42:01,000
OK.
So, can I, in the remaining
minutes, recapture my lecture --

631
00:42:05,350 --> 00:42:09,000
the end of my lecture that was
just before Thanksgiving,

632
00:42:09,000 --> 00:42:11,000
about the matrix?

633
00:42:11,000 --> 00:42:12,000
OK.

634
00:42:12,000 --> 00:42:15,000
What's the matrix?

635
00:42:15,000 --> 00:42:20,000
And I'll just take one basis.

636
00:42:20,000 --> 00:42:30,680
So now this part is going to go
onto this board here.

637
00:42:30,680 --> 00:42:34,250
What is the matrix?

638
00:42:34,250 --> 00:42:36,000
What is A?

639
00:42:36,000 --> 00:42:36,000
OK.
Using a basis v1 up to v8.

640
00:42:43,000 --> 00:42:43,000
Mm.
OK.
What's the point?

641
00:42:46,000 --> 00:42:49,000
The point is,
if I know what the

642
00:42:49,000 --> 00:42:55,000
transformation does to those
eight basis vectors,

643
00:42:55,000 --> 00:42:57,000
I know it completely.

644
00:42:57,000 --> 00:43:04,000
I know T, I know everything
about T, I know T completely

645
00:43:04,000 --> 00:43:11,000
from knowing T of V -- what T
does to v1, what T does to v2,

646
00:43:11,000 --> 00:43:15,000
what T does to v8.

647
00:43:15,000 --> 00:43:16,000
Why is that?

648
00:43:16,000 --> 00:43:18,000
It's because T is a linear
transformation.

649
00:43:18,000 --> 00:43:23,000
So that if I know what these
outputs are -- so these are the

650
00:43:23,000 --> 00:43:26,000
inputs v1 up to v8,
these are the outputs from the

651
00:43:26,000 --> 00:43:29,000
transformation,
like everyone rotated,

652
00:43:29,000 --> 00:43:32,000
everyone projected,
whatever transformation I've

653
00:43:32,000 --> 00:43:36,000
done, then why is it that I know
everything?

654
00:43:36,000 --> 00:43:41,000
How does linearity work?

655
00:43:41,000 --> 00:43:42,000
Why?

656
00:43:42,000 --> 00:43:53,000
This is because every x is some
combination of these basis

657
00:43:53,000 --> 00:44:00,000
vectors, right?
c1v1, c2v2, c8v8,

658
00:44:00,000 --> 00:44:05,000
they were a basis.

659
00:44:05,000 --> 00:44:10,000
That's the whole point of a
basis, that every vector is a

660
00:44:10,000 --> 00:44:16,000
combination of the basis vectors
in exactly one way.

661
00:44:16,000 --> 00:44:18,660
And then, what is T of x?

662
00:44:18,660 --> 00:44:22,000
The point is,
I claim that we know T of x

663
00:44:22,000 --> 00:44:27,000
completely for every x,
because every x is a

664
00:44:27,000 --> 00:44:32,890
combination of those --
and now we use the linear

665
00:44:32,890 --> 00:44:38,000
transformation part to say that
the output from x has to be c1

666
00:44:38,000 --> 00:44:44,000
times the output from v1 plus v2
times the output from v2,

667
00:44:44,000 --> 00:44:45,000
and so on.

668
00:44:45,000 --> 00:44:49,000
Up through c8 times the output
from v8.

669
00:44:49,000 --> 00:44:52,000
So this is like just saying,
OK.

670
00:44:52,000 --> 00:44:57,000
We know everything when we know
what T does to each basis

671
00:44:57,000 --> 00:44:59,000
vector.

672
00:44:59,000 --> 00:44:59,000
OK.
So those are the eight things
we need.

673
00:45:05,490 --> 00:45:12,000
Now -- but we need these
answers in this basis.

674
00:45:12,000 --> 00:45:21,000
So this first output is some
combination of the eight basis

675
00:45:21,000 --> 00:45:22,000
vectors.

676
00:45:22,000 --> 00:45:29,000
So write T acting on the first
input --

677
00:45:29,000 --> 00:45:35,000
in other words,
write the first output as a

678
00:45:35,000 --> 00:45:42,000
combination of the basis
vectors, say a11 v1 + a21 v2 and

679
00:45:42,000 --> 00:45:44,710
so on a81 v8.

680
00:45:44,710 --> 00:45:50,000
Write T of v2 as some
combination a12 of v1,

681
00:45:50,000 --> 00:45:53,380
a22 of v2 and so on.

682
00:45:53,380 --> 00:46:00,000
I'm creating the matrix A,
column by column.

683
00:46:00,000 --> 00:46:06,000
Those numbers go in the first
column, these numbers go in the

684
00:46:06,000 --> 00:46:10,000
second column,
the matrix A that thi- this --

685
00:46:10,000 --> 00:46:15,000
this is our matrix that
represents T in this basis is

686
00:46:15,000 --> 00:46:18,000
these numbers.
a11 down to a18,

687
00:46:18,000 --> 00:46:21,000
a21 down to a28,
and so on.

688
00:46:21,000 --> 00:46:21,000
OK.
That's the recipe.

689
00:46:23,000 --> 00:46:27,000
In other words,
if I give you a transformation,

690
00:46:27,000 --> 00:46:30,000
and a basis.

691
00:46:30,000 --> 00:46:33,000
So that's what I have to give
you.

692
00:46:33,000 --> 00:46:40,000
The inputs are the basis and to
tell you what the transformation

693
00:46:40,000 --> 00:46:40,000
is.
And then, you tell me -- you
compute T for each basis,

694
00:46:46,000 --> 00:46:51,000
expand that result in the
basis, and that gives you the

695
00:46:51,000 --> 00:46:57,000
sixty four numbers that go into
the matrix A.

696
00:46:57,000 --> 00:47:06,000
Let me suppose -- let's close
with the best example of all.

697
00:47:06,000 --> 00:47:11,000
Suppose v1 to v8,
this basis, is the

698
00:47:11,000 --> 00:47:13,000
eigenvectors.

699
00:47:13,000 --> 00:47:22,000
Suppose we have an eigenvector
basis so that T(vi) is in the

700
00:47:22,000 --> 00:47:25,000
same direction of vi.

701
00:47:25,000 --> 00:47:29,000
Now, my question is,
what is A?

702
00:47:29,000 --> 00:47:36,000
Can you carry through the
steps?

703
00:47:36,000 --> 00:47:40,000
Let's do them together,
because we can do it in one

704
00:47:40,000 --> 00:47:41,000
minute.

705
00:47:41,000 --> 00:47:44,000
So, we've chosen this perfect
basis.

706
00:47:44,000 --> 00:47:47,000
And, actually,
with signal image processing,

707
00:47:47,000 --> 00:47:50,000
they might look for the
eigenvectors.

708
00:47:50,000 --> 00:47:55,000
But that would take more
calculation time that just

709
00:47:55,000 --> 00:47:59,000
saying, OK, we'll use the
wavelet basis.

710
00:47:59,000 --> 00:48:03,000
Or, OK, we'll use the Fourier
basis.

711
00:48:03,000 --> 00:48:08,000
But the very best basis is the
eigenvector basis.

712
00:48:08,000 --> 00:48:10,000
OK, what's the matrix?

713
00:48:10,000 --> 00:48:15,190
So, what's the first column of
the matrix?

714
00:48:15,190 --> 00:48:18,000
How do I get the first column?

715
00:48:18,000 --> 00:48:22,000
I take the first basis vector
v1.

716
00:48:22,000 --> 00:48:28,000
I opt -- I look to see,
what does the transformation do

717
00:48:28,000 --> 00:48:29,000
to it?

718
00:48:29,000 --> 00:48:32,000
The output is lambda one v1.

719
00:48:32,000 --> 00:48:38,000
I express that output as a
combination so the first input

720
00:48:38,000 --> 00:48:38,000
is v1.
Its output is lambda one v1.

721
00:48:41,000 --> 00:48:47,000
Now write lambda one v1 as a
combination of the basis

722
00:48:47,000 --> 00:48:51,000
vectors, well,
it's already done.

723
00:48:51,000 --> 00:48:59,000
It's just lambda one times the
first basis vector and zero

724
00:48:59,000 --> 00:49:01,000
times the others.

725
00:49:01,000 --> 00:49:08,000
So this first column will have
lambda one and zeroes.

726
00:49:08,000 --> 00:49:08,000
OK.
Second input is v2.

727
00:49:10,000 --> 00:49:13,000
Output is lambda two v2.

728
00:49:13,000 --> 00:49:20,000
OK, write that output as a
combination of the (v)s.

729
00:49:20,000 --> 00:49:23,000
It's already done.

730
00:49:23,000 --> 00:49:27,000
It's just lambda two times the
second v.

731
00:49:27,000 --> 00:49:32,000
So we need, in the second
column, we have lambda two times

732
00:49:32,000 --> 00:49:33,000
the second v.

733
00:49:33,000 --> 00:49:37,000
Well, you see what's coming,
that in that basis,

734
00:49:37,000 --> 00:49:42,000
in the eigenvector basis,
the matrix is diagonal.

735
00:49:42,000 --> 00:49:47,000
So that's the perfect basis,
that's the basis we'd love to

736
00:49:47,000 --> 00:49:52,000
have for image processing,
but to find the eigenvectors of

737
00:49:52,000 --> 00:49:56,000
our pixel matrix would be too
expensive.

738
00:49:56,000 --> 00:50:01,000
So we do something cheaper and
close, which is to choose a good

739
00:50:01,000 --> 00:50:03,000
basis like wavelets.

740
00:50:03,000 --> 00:50:04,000
OK, thanks.

741
00:50:04,000 --> 00:50:08,000
So I'll -- quiz review on
Wednesday, all day.

742
00:50:08,000 --> 00:50:11,000
Thanks.