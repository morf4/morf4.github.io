<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Sample Solution to Assignment 3, Problem 1 | Assignments | Effective Programming in C and C++ | Electrical Engineering and Computer Science | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="6-s096-effective-programming-in-c-and-c-january-iap-2014" name="WT.cg_n">
<meta content="Sample Solution to Assignment 3, Problem 1" name="WT.cg_s">
<meta content="This section provides a sample solution to Assignment 3, Problem 1." name="Description">
<meta content="Kessler, Andre" name="Author">
<meta content="programming,C,C++,structure,object-oriented,code,memory,abstraction,assembly,stack,software,inheritance,scope,design,environment,cost,code review,project,best practice,Programming Languages,Software Design and Engineering" name="keywords">
<meta content="6.S096 Effective Programming in C and C++ | Sample Solution to Assignment 3, Problem 1" name="Search_Display">
<meta content="Programming Languages" itemprop="about">
<meta content="Software Design and Engineering" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link href="https://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-s096-effective-programming-in-c-and-c-january-iap-2014/assignments/sample-solution-to-assignment-3-problem-1">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top"><div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW"><table class="social"><tbody><tr>
<td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Google+" href="https://plus.google.com/104567381989352550847/posts"><img src="../../../common/images/icon_gp.png" alt="Click to visit our Google+ page."></a>                   <a aria-label="Pinterest" href="https://www.pinterest.com/mitocw/pins/"><img src="../../../common/images/icon_pin.png" alt="Click to visit our Pinterest page."></a>                   <a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>                   <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="../../../common/images/icon_tw.png" alt="Click to visit our Twitter feed."></a>
</td>
        </tr></tbody></table></aside><nav aria-label="Help Links" class="helplinks"><a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/jsp/feedback.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<nav id="mega" class="grid_8 alpha" aria-label="Site"><ul id="menu" role="presentation">
<li id="menu_home">
        <a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
    </li>
<!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses" class="selected">
      <a href="#" aria-hidden="true">Find Courses</a><!-- Begin 5 columns Item -->
      <div class="dropdown_5columns-a mega-courses">
        <div class="col_1a">
          <div class="row_1a">
            <nav aria-labelledby="mm-find-courses-by"><span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
              <ul class="find_by" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
            		<li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-megamenu&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
							</ul></nav><nav aria-labelledby="mm-collections"><span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
              <ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
              </ul></nav><nav class="col_1b" aria-labelledby="mm-translated-courses"><span id="mm-translated-courses" class="nav" aria-hidden="true">Translated Courses</span>
							<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/spanish" aria-label="Spanish">Español / Spanish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/portuguese" aria-label="Portuguese">Português / Portuguese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/persian" aria-label="Persian">فارسی / Persian</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses">More...</a></li>
							</ul></nav>
</div>
          <div class="row_1b">
            <nav aria-labelledby="mm-cross-disciplinary-topic-lists"><span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Cross-Disciplinary Topic Lists</span>
            	<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
              	<li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
              </ul></nav>
</div>
        </div>

      </div>
    </li>
    <li id="drop_2">
        <a href="" aria-hidden="true">About</a>
        <div class="dropdown_1column-a">
            <nav class="col_1" aria-label="About"><ul role="presentation">
<li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
                    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
                    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
                </ul></nav>
</div>
    </li>
    <li id="drop_3">
        <a href="" aria-hidden="true">Donate</a>
        <div class="dropdown_1column-a">
          <nav class="col_1" aria-label="Donate"><ul role="presentation">
<li><a href="https://ocw.mit.edu/donate/">Make a Donation</a></li>
              <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
              <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
              <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
              <li><a href="https://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
              <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
            </ul></nav>
</div>
    </li>
    <li id="drop_4">
      <a href="" aria-hidden="true">Featured Sites</a>
      <div class="dropdown_1column-a">
        <nav class="col_1" aria-labelledby="mm-featured-sites"><span id="mm-featured-sites" class="nav" aria-hidden="true">OCW Initiatives</span>
          <ul role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
            <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=featured-sites">OCW Educator</a></li>
            <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
            <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
					</ul></nav><nav class="col_1" aria-labelledby="mm-featured-external-links"><span id="mm-featured-external-links" class="nav" aria-hidden="true">Beyond OCW</span>
					<ul>
<li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT Plus K12 Videos">MIT+K12 Videos</a></li>
            <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
						<li><a href="https://outreach.mit.edu" aria-label="External Link: Outreach at MIT">Outreach @ MIT</a></li>
						<li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
          </ul></nav>
</div>
    </li>
  </ul></nav><div id="search" role="search" class="grid_4 omega">
  
    <form aria-label="Advanced Search" method="get" action="../../../common/search/AdvancedSearch.htm">
		  <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td>
            <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>
            <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
          </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end --><div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb"><p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science">Electrical Engineering and Computer Science</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Effective Programming in C and C++</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/assignments/index.htm">Assignments</a>
            
                »
                
            
            
         
    
    
        
            
            
            Sample Solution to Assignment 3, Problem 1
         
    
</p>

                 </nav><div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Sample Solution to Assignment 3, Problem 1
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course"><script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/Syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/getting-started/index.htm">
		                  Getting Started  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/lecture-notes/index.htm">
		                  Lecture Notes  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/related-resources/index.htm">
		                  Related Resources  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends --></nav><main id="course_inner_section" aria-labelledby="section_title"><p class="sc_nav">« <a href="../../../contents/assignments/index.htm">Back to Assignments</a></p>
<p>Look in <code>list.h</code> for a sense of the structure of the solution. The big idea to speed up the reduce/apply functions while also giving users a nice way to iterate over the items in the list is to create an "iterator" type within our class. Users will be able to write code similar to the STL:</p>
<pre><code>
<span style="color: rgb(51, 153, 102);">// Print out every item in the list</span>
<span style="color: rgb(0, 112, 192);">for</span>( List::iterator it = list.begin(); it != list.end(); ++it ) {
    <span style="color: rgb(255, 0, 102);">std</span>::cout &lt; &lt; *it &lt;&lt; <span style="color: rgb(0, 0, 255);">"\n"</span>;
}
</code></pre>
<p></p>
<p>To speed up our "append" function, the List class will also store a pointer to the very last element in the current list.</p>
<p>Directory structure:</p>
<ul>
<li>GRADER_INFO.txt</li>
    <li>include
    <ul>
<li>apply.h</li>
        <li>list.h</li>
        <li>list_node.h</li>
        <li>reduce.h</li>
    </ul>
</li>
    <li>Makefile</li>
    <li>src
    <ul>
<li>apply.cpp</li>
        <li>list.cpp</li>
        <li>list_iterator.cpp</li>
        <li>list_node.cpp</li>
        <li>reduce.cpp</li>
        <li>test.cpp</li>
    </ul>
</li>
</ul>
<h3 class="subsubhead">Here are the contents of <strong>apply.h</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#ifndef _6S096_CPPLIST_APPLY_H</span>
<span style="color: rgb(153, 153, 153);">#define _6S096_CPPLIST_APPLY_H</span>
<span style="color: rgb(153, 153, 153);">#include "list.h"</span>
 
<span style="color: rgb(0, 112, 192);">class</span> ApplyFunction {
<span style="color: rgb(0, 112, 192);">protected</span>:
  <span style="color: rgb(0, 112, 192);">virtual</span> <span style="color: rgb(86, 86, 86);">int</span> function( <span style="color: rgb(86, 86, 86);">int x</span> ) <span style="color: rgb(0, 112, 192);">const</span> = 0;
<span style="color: rgb(0, 112, 192);">public</span>:
  <span style="color: rgb(0, 112, 192);">void</span> apply( List &amp;list ) <span style="color: rgb(0, 112, 192);">const</span>;
  <span style="color: rgb(0, 112, 192);">virtual</span> ~ApplyFunction() {}
};
 
<span style="color: rgb(51, 153, 102);">// An example ApplyFunction (see apply.cpp)</span>
<span style="color: rgb(0, 112, 192);">class</span> SquareApply : <span style="color: rgb(0, 112, 192);">public</span> ApplyFunction {
  <span style="color: rgb(86, 86, 86);">int</span> function( <span style="color: rgb(86, 86, 86);">int x</span> ) const;
};
 
<span style="color: rgb(153, 153, 153);">#endif // _6S096_CPPLIST_APPLY_H</span>
</code></pre>
<p></p>
<h3 class="subsubhead">Here are the contents of <strong>list.h</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#ifndef _6S096_CPPLIST_H</span>
<span style="color: rgb(153, 153, 153);">#define _6S096_CPPLIST_H</span>
<span style="color: rgb(153, 153, 153);">#include &lt;<span style="color: rgb(153, 153, 153);">cstddef</span>&gt;</span>
<span style="color: rgb(153, 153, 153);">#include &lt;<span style="color: rgb(153, 153, 153);">stdexcept</span>&gt;</span>
 
<span style="color: rgb(0, 112, 192);">class</span> ApplyFunction;
<span style="color: rgb(0, 112, 192);">class</span> ReduceFunction;
<span style="color: rgb(0, 112, 192);">class</span> ListNode;
 
<span style="color: rgb(0, 112, 192);">class</span> List {
  <span style="color: rgb(86, 86, 86);">size_t</span> _length;
  ListNode *_begin;
  ListNode *_back;
 
<span style="color: rgb(0, 112, 192);">public</span>: 
  <span style="color: rgb(51, 153, 102);">// Can use outside as List::iterator type</span>
  <span style="color: rgb(0, 112, 192);">class</span> iterator {
    <span style="color: rgb(51, 153, 102);">// Making List a friend class means we'll be able to access</span>
    <span style="color: rgb(51, 153, 102);">// the private _node pointer data within the scope of List.</span>
    <span style="color: rgb(0, 112, 192);">friend class</span> List;
    ListNode *_node;
  <span style="color: rgb(0, 112, 192);">public</span>:
    iterator( ListNode *theNode );
    iterator&amp; operator++();
    <span style="color: rgb(86, 86, 86);">int</span>&amp; operator*();
    <span style="color: rgb(86, 86, 86);">bool</span> operator==( <span style="color: rgb(0, 112, 192);">const</span> iterator &amp;rhs );
    <span style="color: rgb(86, 86, 86);">bool</span> operator!=( <span style="color: rgb(0, 112, 192);">const</span> iterator &amp;rhs );
  };
  <span style="color: rgb(51, 153, 102);">// Can use outside as List::const_iterator type</span>
  <span style="color: rgb(0, 112, 192);">class</span> const_iterator {
    <span style="color: rgb(51, 153, 102);">// Again, this is basically the only situation you should</span>
    <span style="color: rgb(51, 153, 102);">// be using the keyword 'friend'</span>
    <span style="color: rgb(0, 112, 192);">friend class</span> List;
    ListNode *_node;
  <span style="color: rgb(0, 112, 192);">public</span>:
    const_iterator( ListNode *theNode );
    const_iterator&amp; operator++();
    <span style="color: rgb(0, 112, 192);">const</span> <span style="color: rgb(86, 86, 86);">int</span>&amp; operator*();
    <span style="color: rgb(86, 86, 86);">bool</span> operator==( <span style="color: rgb(0, 112, 192);">const</span> const_iterator &amp;rhs );
    <span style="color: rgb(86, 86, 86);">bool</span> operator!=( <span style="color: rgb(0, 112, 192);">const</span> const_iterator &amp;rhs );
  };
 
  List();
  List( <span style="color: rgb(0, 112, 192);">const</span> List &amp;list );
  List&amp; operator=( <span style="color: rgb(0, 112, 192);">const</span> List &amp;list );
  ~List();
  <span style="color: rgb(86, 86, 86);">size_t</span> length()<span style="color: rgb(0, 112, 192);">const</span>;
  <span style="color: rgb(86, 86, 86);">int</span>&amp; value( <span style="color: rgb(86, 86, 86);">size_t</span> pos );
  <span style="color: rgb(86, 86, 86);">int</span> value( <span style="color: rgb(86, 86, 86);">size_t</span> pos ) <span style="color: rgb(0, 112, 192);">const</span>;
  <span style="color: rgb(86, 86, 86);">bool</span> empty() <span style="color: rgb(0, 112, 192);">const</span>;
 
  iterator begin();
  const_iterator begin() <span style="color: rgb(0, 112, 192);">const</span>;
  iterator back();
  const_iterator back() <span style="color: rgb(0, 112, 192);">const</span>;
  iterator end();
  const_iterator end() <span style="color: rgb(0, 112, 192);">const</span>;
 
  iterator find( iterator s, iterator t, <span style="color: rgb(86, 86, 86);">int</span> needle );
  <span style="color: rgb(0, 112, 192);">void</span> append( <span style="color: rgb(86, 86, 86);">int</span> theValue );
  <span style="color: rgb(0, 112, 192);">void</span> deleteAll( <span style="color: rgb(86, 86, 86);">int</span> theValue );
  <span style="color: rgb(0, 112, 192);">void</span> insertBefore( <span style="color: rgb(86, 86, 86);">int</span> theValue, <span style="color: rgb(86, 86, 86);">int</span> before );
  <span style="color: rgb(0, 112, 192);">void</span> insert( iterator pos, <span style="color: rgb(86, 86, 86);">int</span> theValue );
 
  <span style="color: rgb(0, 112, 192);">void</span> apply( <span style="color: rgb(0, 112, 192);">const</span> ApplyFunction &amp;interface );
  <span style="color: rgb(86, 86, 86);">int</span> reduce( <span style="color: rgb(0, 112, 192);">const</span> ReduceFunction &amp;interface ) const;
  <span style="color: rgb(0, 112, 192);">void</span> print() <span style="color: rgb(0, 112, 192);">const</span>;
  <span style="color: rgb(0, 112, 192);">void</span> clear();
 
<span style="color: rgb(0, 112, 192);">private</span>:
  ListNode* node( iterator it ) { <span style="color: rgb(0, 112, 192);">return</span> it._node; }
  ListNode* node( const_iterator it ) { <span style="color: rgb(0, 112, 192);">return</span> it._node; }
};
 
<span style="color: rgb(0, 112, 192);">class</span> ListOutOfBounds : <span style="color: rgb(0, 112, 192);">public</span> <span style="color: rgb(255, 0, 102);">std</span>::range_error {
<span style="color: rgb(0, 112, 192);">public</span>:
  <span style="color: rgb(0, 112, 192);">explicit</span> ListOutOfBounds() : <span style="color: rgb(255, 0, 102);">std</span>::range_error( <span style="color: rgb(0, 0, 255);">"List index out of bounds"</span> ) {}
};
 
<span style="color: rgb(153, 153, 153);">#endif // _6S096_CPPLIST_H</span>

</code></pre>
<p></p>
<h3 class="subsubhead">Here are the contents of <strong>list_node.h</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#ifndef _6S096_CPPLIST_NODE_H</span>
<span style="color: rgb(153, 153, 153);">#define _6S096_CPPLIST_NODE_H</span>
 
<span style="color: rgb(0, 112, 192);">class</span> ListNode {
  <span style="color: rgb(86, 86, 86);">int</span> _value;
  ListNode *_next;
  ListNode( <span style="color: rgb(0, 112, 192);">const</span> ListNode &amp; ) = <span style="color: rgb(0, 112, 192);">delete</span>;
  ListNode&amp; operator=( <span style="color: rgb(0, 112, 192);">const</span> ListNode &amp; ) = <span style="color: rgb(0, 112, 192);">delete</span>;
<span style="color: rgb(0, 112, 192);">public</span>:
  ListNode();
  ListNode( <span style="color: rgb(86, 86, 86);">int</span> theValue );
  ~ListNode();
  <span style="color: rgb(86, 86, 86);">int</span>&amp; value();
  <span style="color: rgb(86, 86, 86);">int</span> value() <span style="color: rgb(0, 112, 192);">const</span>;
  ListNode* next();
  <span style="color: rgb(0, 112, 192);">void</span> insertAfter( ListNode *before );
  <span style="color: rgb(0, 112, 192);">void</span> setNext( ListNode *nextNode );
  <span style="color: rgb(0, 112, 192);">static void</span> deleteNext( ListNode *before );
  <span style="color: rgb(0, 112, 192);">static void</span> deleteSection( ListNode *before, ListNode *after );
 
  <span style="color: rgb(0, 112, 192);">static</span> ListNode* create( <span style="color: rgb(86, 86, 86);">int</span> theValue = 0 );
};
 
<span style="color: rgb(153, 153, 153);">#endif // _6S096_CPPLIST_NODE_H</span>
</code></pre>
<p></p>
<h3 class="subsubhead">Here are the contents of <strong>reduce.h</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#ifndef _6S096_CPPLIST_REDUCE_H</span>
<span style="color: rgb(153, 153, 153);">#define _6S096_CPPLIST_REDUCE_H</span>
<span style="color: rgb(153, 153, 153);">#include "list.h"</span>
 
<span style="color: rgb(0, 112, 192);">class</span> ReduceFunction {
<span style="color: rgb(0, 112, 192);">protected</span>:
  <span style="color: rgb(0, 112, 192);">virtual</span> <span style="color: rgb(86, 86, 86);">int</span> function( <span style="color: rgb(86, 86, 86);">int x</span>, <span style="color: rgb(86, 86, 86);">int</span> y ) <span style="color: rgb(0, 112, 192);">const</span> = 0;
<span style="color: rgb(0, 112, 192);">public</span>:
  <span style="color: rgb(86, 86, 86);">int</span> reduce( <span style="color: rgb(0, 112, 192);">const</span> List &amp;list ) <span style="color: rgb(0, 112, 192);">const</span>;
  <span style="color: rgb(0, 112, 192);">virtual</span> <span style="color: rgb(86, 86, 86);">int</span> identity() <span style="color: rgb(0, 112, 192);">const</span> = 0;
  <span style="color: rgb(0, 112, 192);">virtual</span> ~ReduceFunction() {}
};
 
<span style="color: rgb(51, 153, 102);">// An example ReduceFunction</span>
<span style="color: rgb(0, 112, 192);">class</span> SumReduce : <span style="color: rgb(0, 112, 192);">public</span> ReduceFunction {
  <span style="color: rgb(86, 86, 86);">int</span> function( <span style="color: rgb(86, 86, 86);">int</span> x, <span style="color: rgb(86, 86, 86);">int</span> y ) <span style="color: rgb(0, 112, 192);">const</span>;
<span style="color: rgb(0, 112, 192);">public</span>:
  SumReduce() {}
  ~SumReduce() {}
  <span style="color: rgb(86, 86, 86);">int</span> identity() <span style="color: rgb(0, 112, 192);">const</span> { <span style="color: rgb(0, 112, 192);">return</span> 0; }
};
 
<span style="color: rgb(51, 153, 102);">// Another ReduceFunction</span>
<span style="color: rgb(0, 112, 192);">class</span> ProductReduce : <span style="color: rgb(0, 112, 192);">public</span> ReduceFunction {
  <span style="color: rgb(86, 86, 86);">int</span> function( <span style="color: rgb(86, 86, 86);">int</span> x, <span style="color: rgb(86, 86, 86);">int</span> y ) <span style="color: rgb(0, 112, 192);">const</span>;
<span style="color: rgb(0, 112, 192);">public</span>:
  ProductReduce() {}
  ~ProductReduce() {}
  <span style="color: rgb(86, 86, 86);">int</span> identity() <span style="color: rgb(0, 112, 192);">const</span> { <span style="color: rgb(0, 112, 192);">return</span> 1; }
};
 
<span style="color: rgb(153, 153, 153);">#endif // _6S096_CPPLIST_REDUCE_H</span>
</code></pre>
<p></p>
<h3 class="subsubhead">Here is the source code file <strong>apply.cpp</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#include "list.h"</span>
<span style="color: rgb(153, 153, 153);">#include "apply.h"</span>
 
<span style="color: rgb(0, 112, 192);">void</span> ApplyFunction::apply( List &amp;list ) <span style="color: rgb(0, 112, 192);">const</span> {
  <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">auto</span> it = list.begin(); it != list.end(); ++it ) {
    *it = function( *it );
  }
}
 
<span style="color: rgb(86, 86, 86);">int</span> SquareApply::function( <span style="color: rgb(86, 86, 86);">int</span> x ) <span style="color: rgb(0, 0, 255);">const</span> {
  <span style="color: rgb(0, 0, 255);">return</span> x * x;
}
</code></pre>
<p></p>
<h3 class="subsubhead">Here is the source code file <strong>list.cpp</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#include "list.h"</span>
<span style="color: rgb(153, 153, 153);">#include "list_node.h"</span>
<span style="color: rgb(153, 153, 153);">#include "apply.h"</span>
<span style="color: rgb(153, 153, 153);">#include "reduce.h"</span>
 
<span style="color: rgb(153, 153, 153);">#include &lt;<span style="color: rgb(153, 153, 153);">iostream</span>&gt;</span>
 
List::List() : _length{0}, _begin{ <span style="color: rgb(0, 112, 192);">nullptr</span> }, _back{ <span style="color: rgb(0, 112, 192);">nullptr</span> } {}
 
List::List( <span style="color: rgb(0, 112, 192);">const</span> List &amp;list ) : _length{0}, _begin{nullptr}, _back{<span style="color: rgb(0, 112, 192);">nullptr</span>} {
  <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">auto</span> it = list.begin(); it != list.end(); ++it ) {
    append( *it );
  } 
}
 
List&amp; List::operator=( <span style="color: rgb(0, 112, 192);">const</span> List &amp;list ) {
  <span style="color: rgb(0, 112, 192);">if</span>( <span style="color: rgb(0, 112, 192);">this</span> != &amp;list ) {
    clear();
    <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">auto</span> it = list.begin(); it != list.end(); ++it ) {
      append( *it );
    } 
  }
  <span style="color: rgb(0, 112, 192);">return</span> *<span style="color: rgb(0, 112, 192);">this</span>;
}
 
List::~List() { clear(); }
 
<span style="color: rgb(86, 86, 86);">size_t</span> List::length() <span style="color: rgb(0, 112, 192);">const</span> { <span style="color: rgb(0, 112, 192);">return</span> _length; }
 
<span style="color: rgb(86, 86, 86);">int</span>&amp; List::value( <span style="color: rgb(86, 86, 86);">size_t</span> pos ) {
  <span style="color: rgb(86, 86, 86);">auto</span> it = begin();
  <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">size_t</span> i = 0; i &lt; pos &amp;&amp; it != end(); ++it, ++i );
  <span style="color: rgb(0, 112, 192);">if</span>( it == end() ) {
    <span style="color: rgb(0, 112, 192);">throw</span> ListOutOfBounds();
  }
 
  <span style="color: rgb(0, 112, 192);">return</span> *it;
}
 
<span style="color: rgb(86, 86, 86);">int</span> List::value( <span style="color: rgb(86, 86, 86);">size_t</span> pos ) <span style="color: rgb(0, 112, 192);">const</span> {
  <span style="color: rgb(86, 86, 86);">auto</span> it = begin();
  <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">size_t</span> i = 0; i &lt; pos &amp;&amp; it != end(); ++it, ++i );
  <span style="color: rgb(0, 112, 192);">if</span>( it == end() ) {
    <span style="color: rgb(0, 112, 192);">throw</span> ListOutOfBounds();
  }
 
  <span style="color: rgb(0, 112, 192);">return</span> *it;
}
 
<span style="color: rgb(86, 86, 86);">bool</span> List::empty() <span style="color: rgb(0, 112, 192);">const</span> {
 <span style="color: rgb(0, 112, 192);">return</span> _length == 0;
}
 
List::iterator List::begin() { <span style="color: rgb(0, 112, 192);">return</span> iterator{ _begin }; }
List::const_iterator List::begin() <span style="color: rgb(0, 112, 192);">const</span> { <span style="color: rgb(0, 112, 192);">return</span> const_iterator{ _begin }; }
List::iterator List::back() { <span style="color: rgb(0, 112, 192);">return</span> iterator{ _back }; }
List::const_iterator List::back() <span style="color: rgb(0, 112, 192);">const</span> { <span style="color: rgb(0, 112, 192);">return</span> const_iterator{ _back }; }
List::iterator List::end() { <span style="color: rgb(0, 112, 192);">return</span> iterator{ <span style="color: rgb(0, 112, 192);">nullptr</span> }; }
List::const_iterator List::end() <span style="color: rgb(0, 112, 192);">const</span> { <span style="color: rgb(0, 112, 192);">return</span> const_iterator{ <span style="color: rgb(0, 112, 192);">nullptr</span> }; }
 
<span style="color: rgb(0, 112, 192);">void</span> List::append( <span style="color: rgb(86, 86, 86);">int</span> theValue ) {
  <span style="color: rgb(86, 86, 86);">auto</span> *newNode = ListNode::create( theValue );
 
  <span style="color: rgb(0, 112, 192);">if</span>( empty() ) {
    newNode-&gt;setNext( _back );
    _begin = newNode;
  } <span style="color: rgb(0, 112, 192);">else</span> {
    newNode-&gt;insertAfter( _back );
  }
 
  _back = newNode;
  ++_length;
}
 
<span style="color: rgb(0, 112, 192);">void</span> List::deleteAll( <span style="color: rgb(86, 86, 86);">int</span> theValue ) {
  <span style="color: rgb(0, 112, 192);">if</span>( !empty() ) {
    <span style="color: rgb(51, 153, 102);">// Delete from the front</span>
    <span style="color: rgb(0, 112, 192);">while</span>( _begin-&gt;value() == theValue &amp;&amp; _begin != _back ) {
      <span style="color: rgb(86, 86, 86);">auto</span> *newBegin = _begin-&gt;next();
      <span style="color: rgb(0, 112, 192);">delete</span> _begin;
      _begin = newBegin;
      --_length;
    }
 
    <span style="color: rgb(86, 86, 86);">auto</span> *p = _begin;
 
    <span style="color: rgb(0, 112, 192);">if</span>( _begin != _back ) {
      <span style="color: rgb(51, 153, 102);">// Normal deletion from interior of list</span>
      <span style="color: rgb(0, 112, 192);">for</span>( ; p-&gt;next() != _back; ) {
        <span style="color: rgb(0, 112, 192);">if</span>( p-&gt;next()-&gt;value() == theValue ) {
          ListNode::deleteNext( p );
          --_length;
        } <span style="color: rgb(0, 112, 192);">else</span> {
          p = p-&gt;next();
        }
      }
 
      <span style="color: rgb(51, 153, 102);">// Deleting the last item</span>
      <span style="color: rgb(0, 112, 192);">if</span>( _back-&gt;value() == theValue ) {
        ListNode::deleteNext( p );
        _back = p;
        --_length;
      }
    } <span style="color: rgb(0, 112, 192);">else if</span>( _begin-&gt;value() == theValue ) {
      <span style="color: rgb(51, 153, 102);">// Deal with the case where we deleted the whole list</span>
      _begin = _back = <span style="color: rgb(0, 112, 192);">nullptr</span>;
      _length = 0;
    }
  }
}
 
List::iterator List::find( iterator s, iterator t, int needle ) {
  <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">auto</span> it = s; it != t; ++it ) {
    <span style="color: rgb(0, 112, 192);">if</span>( *it == needle ) {
      <span style="color: rgb(0, 112, 192);">return</span> it;
    }
  }
  <span style="color: rgb(0, 112, 192);">return</span> t;
}
 
<span style="color: rgb(0, 112, 192);">void</span> List::insert( iterator pos, <span style="color: rgb(86, 86, 86);">int</span> theValue ) {
  <span style="color: rgb(86, 86, 86);">auto</span> *posPtr = node( pos );
  <span style="color: rgb(86, 86, 86);">auto</span> *newNode = ListNode::create( theValue );
  newNode-&gt;insertAfter( posPtr );
  ++_length;
}
 
<span style="color: rgb(0, 112, 192);">void</span> List::insertBefore( <span style="color: rgb(86, 86, 86);">int</span> theValue, <span style="color: rgb(86, 86, 86);">int</span> before ) {
  <span style="color: rgb(0, 112, 192);">if</span>( !empty() ) {
    <span style="color: rgb(0, 112, 192);">if</span>( _begin-&gt;value() == before ) {
      <span style="color: rgb(86, 86, 86);">auto</span> *newNode = ListNode::create( theValue );
      newNode-&gt;setNext( _begin );
      _begin = newNode;
      ++_length;
    } <span style="color: rgb(0, 112, 192);">else</span> {
      <span style="color: rgb(86, 86, 86);">auto</span> *p = _begin;
      <span style="color: rgb(0, 112, 192);">for</span>( ; p != _back &amp;&amp; p-&gt;next()-&gt;value() != before; p = p-&gt;next() );
      <span style="color: rgb(0, 112, 192);">if</span>( p != _back &amp;&amp; p-&gt;next()-&gt;value() == before ) {
        <span style="color: rgb(86, 86, 86);">auto *newNode = ListNode::create( theValue );
        newNode-&gt;insertAfter( p );
        ++_length;
      }
    }
  }
}
 
<span style="color: rgb(0, 112, 192);">void</span> List::apply( <span style="color: rgb(0, 112, 192);">const</span> ApplyFunction &amp;interface ) {
  interface.apply( *<span style="color: rgb(0, 112, 192);">this</span> );
}
 
<span style="color: rgb(86, 86, 86);">int</span> List::reduce( <span style="color: rgb(0, 112, 192);">const</span> ReduceFunction &amp;interface ) const {
  <span style="color: rgb(0, 112, 192);">return</span> interface.reduce( *<span style="color: rgb(0, 112, 192);">this</span> );
}
 
<span style="color: rgb(0, 112, 192);">void</span> List::print() <span style="color: rgb(0, 112, 192);">const</span> {
  <span style="color: rgb(255, 0, 102);">std</span>::cout &lt;&lt; <span style="color: rgb(0, 0, 255);">"{ "</span>;
  <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">auto</span> it = begin(); it != back(); ++it ) {
    <span style="color: rgb(255, 0, 102);">std</span>::cout &lt;&lt; *it &lt;&lt; <span style="color: rgb(0, 0, 255);">" -&gt; "</span>;
  }
  <span style="color: rgb(0, 112, 192);">if</span>( !empty() ) {
    <span style="color: rgb(255, 0, 102);">std</span>::cout &lt;&lt; *back() &lt;&lt; <span style="color: rgb(0, 0, 255);">" "</span>;
  }
  <span style="color: rgb(255, 0, 102);">std</span>::cout &lt;&lt; <span style="color: rgb(0, 0, 255);">"}\n"</span>;
}
 
<span style="color: rgb(0, 112, 192);">void</span> List::clear() {
  <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">auto</span> *p = _begin; p != <span style="color: rgb(0, 112, 192);">nullptr</span>; ) {
    <span style="color: rgb(86, 86, 86);">auto</span> *p_next = p-&gt;next();
    <span style="color: rgb(0, 112, 192);">delete</span> p;
    p = p_next;
  }
  _length = 0;
  _begin = <span style="color: rgb(0, 112, 192);">nullptr</span>;
  _back = <span style="color: rgb(0, 112, 192);">nullptr</span>;
}
</span></code></pre>
<p></p>
<h3 class="subsubhead">Here is the source code file <strong>list_iterator.cpp</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#include "list.h"</span>
<span style="color: rgb(153, 153, 153);">#include "list_node.h"</span>
 
List::iterator::iterator( ListNode *theNode ) : _node{theNode} {}
List::iterator&amp; List::iterator::operator++() { 
  _node = _node-&gt;next(); 
  <span style="color: rgb(0, 112, 192);">return *this</span>; 
}
<span style="color: rgb(86, 86, 86);">int</span>&amp; List::iterator::operator*() { <span style="color: rgb(0, 112, 192);">return</span> _node-&gt;value(); }
<span style="color: rgb(86, 86, 86);">bool</span> List::iterator::operator==( <span style="color: rgb(0, 112, 192);">const</span> iterator &amp;rhs ) { return _node == rhs._node; }
<span style="color: rgb(86, 86, 86);">bool</span> List::iterator::operator!=( <span style="color: rgb(0, 112, 192);">const</span> iterator &amp;rhs ) { return _node != rhs._node; }
 
List::const_iterator::const_iterator( ListNode *theNode ) : _node{theNode} {}
List::const_iterator&amp; List::const_iterator::operator++() { 
  _node = _node-&gt;next(); 
  <span style="color: rgb(0, 112, 192);">return *this</span>; 
}
<span style="color: rgb(0, 112, 192);">const</span> <span style="color: rgb(86, 86, 86);">int</span>&amp; List::const_iterator::operator*() { <span style="color: rgb(0, 112, 192);">return</span> _node-&gt;value(); }
<span style="color: rgb(86, 86, 86);">bool</span> List::const_iterator::operator==( <span style="color: rgb(0, 112, 192);">const</span> const_iterator &amp;rhs ) { <span style="color: rgb(0, 112, 192);">return</span> _node == rhs._node; }
<span style="color: rgb(86, 86, 86);">bool</span> List::const_iterator::operator!=( <span style="color: rgb(0, 112, 192);">const</span> const_iterator &amp;rhs ) { <span style="color: rgb(0, 112, 192);">return</span> _node != rhs._node; }
</code></pre>
<p></p>
<h3 class="subsubhead">Here is the source code file <strong>list_node.cpp</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#include "list_node.h"</span>
 
ListNode::ListNode() : _value{0}, _next{<span style="color: rgb(0, 112, 192);">nullptr</span>} {}
ListNode::ListNode( <span style="color: rgb(86, 86, 86);">int<span> theValue ) : _value{theValue}, _next{<span style="color: rgb(0, 112, 192);">nullptr</span>} {}
ListNode::~ListNode() {}
<span style="color: rgb(86, 86, 86);">int</span>&amp; ListNode::value() { <span style="color: rgb(0, 112, 192);">return</span> _value; }
<span style="color: rgb(86, 86, 86);">int</span> ListNode::value(){<span style="color: rgb(0, 112, 192);">const</span> { <span style="color: rgb(0, 112, 192);">return</span> _value; }
ListNode* ListNode::next() { <span style="color: rgb(0, 112, 192);">return</span> _next; }
 
<span style="color: rgb(0, 112, 192);">void</span> ListNode::insertAfter( ListNode *before ) {
  _next = before-&gt;next();
  before-&gt;_next = <span style="color: rgb(0, 112, 192);">this</span>;
}
 
<span style="color: rgb(0, 112, 192);">void</span> ListNode::setNext( ListNode *nextNode ) {
  _next = nextNode;
}
 
<span style="color: rgb(0, 112, 192);">void</span> ListNode::deleteNext( ListNode *before ) {
  <span style="color: rgb(86, 86, 86);">auto</span> *after = before-&gt;next()-&gt;next();
  <span style="color: rgb(0, 112, 192);">delete</span> before-&gt;next();
  before-&gt;_next = after;
}
 
<span style="color: rgb(0, 112, 192);">void</span> ListNode::deleteSection( ListNode *before, ListNode *after ) {
  <span style="color: rgb(86, 86, 86);">auto</span> *deleteFront = before-&gt;next();
  <span style="color: rgb(0, 112, 192);">while</span>( deleteFront != after ) {
    <span style="color: rgb(86, 86, 86);">auto</span> *nextDelete = deleteFront-&gt;next();
    <span style="color: rgb(0, 112, 192);">delete</span> deleteFront;
    deleteFront = nextDelete;
  }
}
 
ListNode* ListNode::create( <span style="color: rgb(86, 86, 86);">int</span> theValue ) {
  <span style="color: rgb(0, 112, 192);">return new</span> ListNode{ theValue };
}
</span></span></code></pre>
<p></p>
<h3 class="subsubhead">Here is the source code file <strong>reduce.cpp</strong>:</h3>
<pre><code>
<span style="color: rgb(153, 153, 153);">#include "list.h"</span>
<span style="color: rgb(153, 153, 153);">#include "reduce.h"</span>
 
<span style="color: rgb(86, 86, 86);">int</span> ReduceFunction::reduce(<span style="color: rgb(0, 112, 192);">const<span> List &amp;list ) <span style="color: rgb(0, 112, 192);">const</span> {
  <span style="color: rgb(86, 86, 86);">int</span> result = identity();
  <span style="color: rgb(0, 112, 192);">for</span>( <span style="color: rgb(86, 86, 86);">auto<span> it = list.begin(); it != list.end(); ++it ) {
    result = function( result, *it );
  }
  <span style="color: rgb(0, 112, 192);">return</span> result;
}
 
<span style="color: rgb(86, 86, 86);">int</span> SumReduce::function( <span style="color: rgb(86, 86, 86);">int</span> x, <span style="color: rgb(86, 86, 86);">int</span> y ) <span style="color: rgb(0, 112, 192);">const</span> { 
  <span style="color: rgb(0, 112, 192);">return</span> x + y; 
}
 
<span style="color: rgb(86, 86, 86);">int</span> ProductReduce::function(<span style="color: rgb(86, 86, 86);">int</span> x, <span style="color: rgb(86, 86, 86);">int</span> y ) <span style="color: rgb(0, 112, 192);">const</span> { 
  <span style="color: rgb(0, 112, 192);">return</span> x * y; 
}
</span></span></span></span></code></pre>
<p></p>
<h3 class="subsubhead">Below is the output using the test data:</h3>
<pre><code>
<strong>cpplist:</strong> 
 1: OK [0.004 seconds] OK!
 2: OK [0.005 seconds] OK!
 3: OK [0.005 seconds] OK!
 4: OK [0.009 seconds] OK!
 5: OK [0.006 seconds] OK!
 6: OK [0.308 seconds] OK!
 7: OK [0.053 seconds] OK!
 8: OK [0.007 seconds] OK!
 9: OK [0.005 seconds] OK!
10: OK [0.742 seconds] OK!
</code></pre>
<p class="sc_nav_bottom">« <a href="../../../contents/assignments/index.htm">Back to Assignments</a></p>
	                    

	        			
	                    
	                    
	                    	
	                    

            		 </main><!--Course_inner_section tag close --><div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->             
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom"><div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index-->
<div id="footer">
<nav aria-label="Footer"><nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses"><span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-footer&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
</ul></nav><div id="foot-c2" class="grid_2">
<nav aria-labelledby="f-about"><span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
    <li><a href="https://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li>
</ul></nav><!--about--><nav aria-labelledby="f-tools"><span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>
    <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul></nav><!--tools-->
</div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate"><span id="f-donate" class="footer" aria-hidden="true">Donate</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/donate">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
    <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul></nav><div class="grid_2" id="foot-c4"><nav aria-labelledby="f-featured-sites"><span id="f-featured-sites" class="footer" aria-hidden="true">Featured Sites</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=featured-sites">OCW Educator</a></li>
    <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
    <li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT+K12 Videos">MIT+K12 Videos</a></li>
    <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
    <li><a href="https://outreach.mit.edu/" aria-label="External Link: Outreach at MIT">Outreach@MIT</a></li>
    <li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
</ul></nav></div>
</nav><!--Footer Nav>--><aside id="foot-c5" class="grid_4 omega" aria-labelledby="f-our-corporate-supporters" style="min-height: 289px;"><span id="f-our-corporate-supporters" class="footer" aria-hidden="true">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside><aside class="grid_12 alpha omega" aria-label="OCW 15th Anniversary" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px; font-weight: bold;"><span style="text-transform: uppercase;">MIT OpenCourseWare's</span> 15th anniversary</span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro" src="../../../common/images/logo_sapient.png"></a></p>
</aside><aside class="grid_12 alpha omega" aria-labelledby="f-about-ocw" itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;"><span id="f-about-ocw" class="footer" aria-hidden="true">             About <span itemprop="name">MIT OpenCourseWare</span></span>
<p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">OCW is a free and open publication of material from thousands of MIT courses, covering the entire MIT curriculum. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu">               <img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology" src="../../../common/images/logo_mit.png"></a>             <a href="http://odl.mit.edu">               <img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning" src="https://ocw.mit.edu/images/logo_odl.png"></a>             <a href="http://www.oeconsortium.org/">               <img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium" src="https://ocw.mit.edu/images/logo_oec.png"></a>             <a itemprop="useRightsUrl" rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">               <img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons" src="../../../common/images/cc_by-nc-sa.png"></a>
</div>
<div id="f-legal" class="grid_12 alpha omega" style="border-top: none;">
<p class="copyright">© 2001–2015<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</aside>
</div>
<!--footer-->   <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->
</body>
</html>
