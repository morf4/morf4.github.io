<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Recitation 6 | Recitations | Foundations of Software Engineering | Civil and Environmental Engineering | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="1-124j-foundations-of-software-engineering-fall-2000" name="WT.cg_n">
<meta content="Recitation 6" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Amaratunga, Kevin" name="Author">
<meta content="modern software development,engineering and information technology,component-based software,C#,.NET,data structures,algorithms for modeling,analysis,visualization,basic problem-solving techniques,web services,management and maintenance of software,sorting,searching,algorithms,numerical simulation techniques,image processing,computational geometry,finite element methods,network methods,e-business applications,classes,objects,inheritance,virtual functions,abstract classes,polymorphism,Java applications,applets,Abstract Windowing Toolkit,Graphics,Threads,Java,C++,information technology,engineering,modeling algorithms,basic problem-solving,software management,software maintenance,searching algorithms,numerical simulation,object oriented programming,1.124J,2.159J,13.470J,1.124,2.159,13.470,Software Design and Engineering" name="keywords">
<meta content="1.124J Foundations of Software Engineering | Recitation 6" name="Search_Display">
<meta content="Software Design and Engineering" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link href="https://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="https://ocw.mit.edu/courses/civil-and-environmental-engineering/1-124j-foundations-of-software-engineering-fall-2000/recitations/recitation_6">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/expandy.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top"><div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW"><table class="social"><tbody><tr>
<td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Google+" href="https://plus.google.com/104567381989352550847/posts"><img src="../../../common/images/icon_gp.png" alt="Click to visit our Google+ page."></a>                   <a aria-label="Pinterest" href="https://www.pinterest.com/mitocw/pins/"><img src="../../../common/images/icon_pin.png" alt="Click to visit our Pinterest page."></a>                   <a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>                   <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="../../../common/images/icon_tw.png" alt="Click to visit our Twitter feed."></a>
</td>
        </tr></tbody></table></aside><nav aria-label="Help Links" class="helplinks"><a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/jsp/feedback.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<nav id="mega" class="grid_8 alpha" aria-label="Site"><ul id="menu" role="presentation">
<li id="menu_home">
        <a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
    </li>
<!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses" class="selected">
      <a href="#" aria-hidden="true">Find Courses</a><!-- Begin 5 columns Item -->
      <div class="dropdown_5columns-a mega-courses">
        <div class="col_1a">
          <div class="row_1a">
            <nav aria-labelledby="mm-find-courses-by"><span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
              <ul class="find_by" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
            		<li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-megamenu&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
							</ul></nav><nav aria-labelledby="mm-collections"><span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
              <ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
              </ul></nav><nav class="col_1b" aria-labelledby="mm-translated-courses"><span id="mm-translated-courses" class="nav" aria-hidden="true">Translated Courses</span>
							<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/spanish" aria-label="Spanish">Español / Spanish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/portuguese" aria-label="Portuguese">Português / Portuguese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/persian" aria-label="Persian">فارسی / Persian</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses">More...</a></li>
							</ul></nav>
</div>
          <div class="row_1b">
            <nav aria-labelledby="mm-cross-disciplinary-topic-lists"><span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Cross-Disciplinary Topic Lists</span>
            	<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
              	<li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
              </ul></nav>
</div>
        </div>

      </div>
    </li>
    <li id="drop_2">
        <a href="" aria-hidden="true">About</a>
        <div class="dropdown_1column-a">
            <nav class="col_1" aria-label="About"><ul role="presentation">
<li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
                    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
                    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
                </ul></nav>
</div>
    </li>
    <li id="drop_3">
        <a href="" aria-hidden="true">Donate</a>
        <div class="dropdown_1column-a">
          <nav class="col_1" aria-label="Donate"><ul role="presentation">
<li><a href="https://ocw.mit.edu/donate/">Make a Donation</a></li>
              <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
              <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
              <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
              <li><a href="https://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
              <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
            </ul></nav>
</div>
    </li>
    <li id="drop_4">
      <a href="" aria-hidden="true">Featured Sites</a>
      <div class="dropdown_1column-a">
        <nav class="col_1" aria-labelledby="mm-featured-sites"><span id="mm-featured-sites" class="nav" aria-hidden="true">OCW Initiatives</span>
          <ul role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
            <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=featured-sites">OCW Educator</a></li>
            <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
            <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
					</ul></nav><nav class="col_1" aria-labelledby="mm-featured-external-links"><span id="mm-featured-external-links" class="nav" aria-hidden="true">Beyond OCW</span>
					<ul>
<li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT Plus K12 Videos">MIT+K12 Videos</a></li>
            <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
						<li><a href="https://outreach.mit.edu" aria-label="External Link: Outreach at MIT">Outreach @ MIT</a></li>
						<li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
          </ul></nav>
</div>
    </li>
  </ul></nav><div id="search" role="search" class="grid_4 omega">
  
    <form aria-label="Advanced Search" method="get" action="../../../common/search/AdvancedSearch.htm">
		  <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td>
            <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>
            <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
          </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end --><div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb"><p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/civil-and-environmental-engineering">Civil and Environmental Engineering</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Foundations of Software Engineering</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/recitations/index.htm">Recitations</a>
            
                »
                
            
            
         
    
    
        
            
            
            Recitation 6
         
    
</p>

                 </nav><div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Recitation 6
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course"><script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/lecture-notes/index.htm">
		                  Lecture Notes  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/recitations/index.htm">
		                  Recitations  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/projects/index.htm">
		                  Projects  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends --></nav><main id="course_inner_section" aria-labelledby="section_title"><h2 class="subhead">These notes were prepared by <a href="mailto:komodromos@ucy.ac.cy">Petros Komodromos</a>.</h2>
<h2 class="subhead">Topics</h2>
<ol>
<li><a href="#1">Introduction to Java®</a></li>
<li><a href="#2">Compiling and running a Java® application and a Java® applet</a></li>
<li>
<a href="#3">Data types</a> </li>
<li><a href="#4">Variables, declarations, initializations, assignments</a></li>
<li><a href="#5">Operators, precedence, associativity, type conversions, and mixed expressions</a></li>
<li><a href="#6">Control structures</a></li>
<li>
<a href="#7">Comments</a> </li>
<li>
<a href="#8">Arrays</a> </li>
<li><a href="#9">Classes and Objects</a></li>
<li>
<a href="#10">Constructors</a> </li>
<li>
<a href="#11">Initializers</a> </li>
<li>
<a href="#12">Member data and functions</a> </li>
<li><a href="#13">Function overloading</a></li>
</ol>
<h2 class="subhead">
<a id="1" name="1"></a>1. Introduction to <a href="http://java.sun.com/">Java®</a>
</h2>
<p>Java® is an Object-Oriented Programming (OOP) language, which is similar to C++ but with certain characteristics that allow the simple development of portable programs with graphics and graphical user interfaces. The provided classes allow very simple and efficient development of complicated programs that can be executed in any machine irrespectively of the operating system, as long as it supports Java®. You can read more about <a href="http://java.sun.com/docs/books/tutorial/getStarted/intro/definition.html">"what is Java®"</a> in the relevant paragraph of the <a href="http://java.sun.com/docs/books/tutorial/">Java® Tutorial,</a> provided by Sun.</p>
<p>The <em>portability</em> of Java® programs is based on the Java® Virtual Machine (Java® VM) and the intermediate compilation into bytecode. The bytecode can, then, be interpreted by the Java® VM, which translates the bytecode instructions into machine instructions that your computer can understand and execute.</p>
<p>The Java® platform consists essentially by the Java® VM, which takes care of the compilation and interpretation issues (e.g. portability), and by the Java® API, which provides a large collection of software components that can be directly used by a Java® programmer. You can read more about it in the on-line paper <a href="http://java.sun.com/docs/white/platform/javaplatformTOC.doc.html">"The Java® Platform",</a> by Douglas Kramer.</p>
<p>The <a href="http://java.sun.com/j2se/1.3/docs/api/index.html">Application Programming Interface (API)</a>provides several classes that can be used to efficiently write programs with graphics content and graphical user interfaces. The latter can be achieved with C++ only by combining it with graphic libraries such as Open Inventor or OpenGL, and with toolkit libraries such as TCL and TK.</p>
<p>In addition, Java® facilitates the development of programs that deal with networking, security issues, databases, 3D graphics, and many other issues that a typical high level language, such as C++,  does not provide.</p>
<p>The following are good references to learn Java®:</p>
<ul>
<li>
<a href="http://java.sun.com/docs/books/tutorial/">The Java® Tutorial</a>. Mary Campione and Kathy Walrath. 2nd edition.</li>
<li>
<em>Core Java®.</em> Gary Cornell and Cay Horstmann. 2nd edition.</li>
<li>
<em>The Java® programming language.</em> Ken Arnold and James Gosling. 2nd edition.</li>
<li>
<em>Java®: How to program.</em> Deitel &amp; Deitel. 2nd edition.</li>
<li><a href="http://java.sun.com/j2se/1.3/docs/api/index.html">Java<em>®</em> 2 Platform API, v 1.3</a></li>
</ul>
<p>If you are interested to read more about Java® you can find more information in the following on-line paper by James Gosling and Henry McGilton:</p>
<ul>
<li>"<a href="http://java.sun.com/docs/white/langenv/">The Java® Language Environment - A White Paper</a>." May 1996.</li>
</ul>
<p>You can find more information about Java® in the <a href="http://java.sun.com/">Sun's Java® page</a>.</p>
<h2 class="subhead">
<a id="2" name="2"></a>2. Compiling/Running a Java® Application/Applet</h2>
<p>Java® is a pure Object Oriented Programming (OOP) language. Any Java® program is built from classes. C++ can be used as an OOP language but not necessarily since someone can use it to develop non-object oriented programs.</p>
<p>The simplest, probably, Java® program is a Java® application which prints a message. A Java® application is a Java® program that can be executed independently without the need of any browser.</p>
<p>The following java program is written in a file named <em>welcome.java":</em></p>
<p><em>welcome.java</em></p>
<blockquote>
<p><em>class Welcome</em><br><em>{</em><br><em> public static void main(String args[])</em><br><em>      {</em><br><em>       System.out.println("Welcome to 1.124");</em><br><em>      }</em><br><em>}</em></p>
</blockquote>
<p><br>
Because global functions are not allowable in Java® we need to provide the <em>main()</em> function in a class. In addition, we need to make it <em>public</em> so as to be accessible, and <em>static</em> so as to be a class function rather than being a function associated with a certain instance of the class. The <em>main</em> function must have a single parameter of type <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.lang.String.html#_top_">String</a>[] and must return nothing (i.e. being <em>void</em>). Any class can have its own <em>main</em> function.</p>
<p>To compile a java program the java compiler <a href="http://java.sun.com/j2se/1.5.0/docs/tooldocs/solaris/javac.html">javac</a> is used as follows:</p>
<p><em>javac welcome.java</em></p>
<p>This command generates the bytecode for the classes that are defined in the Java® program. In this case, it generates the file <em>Welcome.class</em> which contains the bytecode for the class <em>Welcome</em>. The name of the file with the bytecode is constructed from the name of the class plus the extension <em>class</em>. The bytecode is instructions for the <em>Java</em>® <em>Virtual Machine</em>. These instructions are the same for any type of machine or operating system. To run the program, the Java® interpreter needs to be used to interpret the Java® bytecode into instructions of the specific machine on which the program is running.<br><br>
The command to run a Java® program is as follows, using the <a href="http://java.sun.com/developer/onlineTraining/new2java/overview.html">java</a> interpreter:</p>
<p><em>java Welcome</em></p>
<p>Then, the class <em>Welcome</em> is loaded and interpreted printing out the following:</p>
<p>Welcome to 1.124</p>
<p>Some programming languages, such as Basic, also use an interpreter, which makes the development and the debugging of the programs faster and more efficient. However, most high level languages use a compiler and not an interpreter, while Java® uses both. The bytecode files can, in general, run in  any machine with any operating system, as long as the proper interpreter is available. However, the execution of such interpreted programs is relatively slow.</p>
<p>Many other programming languages, such as C/C++, are using a compiler, which translates the source code files into machine instructions. Although the execution of compiled programs is much faster, the executable cannot run on a machine with a different architecture, since it recognizes a different set of instructions.</p>
<p>Java® combines both a compiler and an interpreter. The compiler (<em>javac</em>) compiles the Java® source code files into bytecode, and the interpreter (<em>java</em>) is used every time the program is executed to translate the bytecode (i.e. the Virtual Machine instructions) to the specific machine instructions and execute them. This way Java® programs can run on any type of computer and under any operating system assuming that the Java® interpreter is available and can be used on that machine. However, Java® programs are, in general, slower than compiled programs (e.g. C++ executable programs) since interpretation takes place before execution.</p>
<p><a href="http://java.sun.com/docs/books/tutorial/overview/index.html">Java® Development Kit (JDK)</a>also provides an <a href="http://java.sun.com/products/jdk/1.1/docs/tooldocs/solaris/appletviewer.html">appletviewer</a> to check and run applets, a debugger named <a href="http://java.sun.com/products/jdk/1.2/docs/tooldocs/solaris/jdb.html">jdb</a> to debug Java® programs, and several other tools that help in the development and documentation of Java® programs.</p>
<p><em>Java</em>® <em>applications</em> are stand alone Java® programs that can be executed without the need of a browser, while the <em>Java</em>® <em>applets</em> run within a Java® compatible browser. The execution of any Java® application begins with the main method of the corresponding class, i.e.. the class with which the Java® interpreter was invoked. The above example is a Java® application, while the following is a simple Java® applet.</p>
<p>A <em>Java</em>® <em>applet</em> is based on a set of conventions and functionalities that are inherited that allows it to be executed in an appletviewer or any Java® enabled browser. The source code for the applet is provided below, followed by the <em>html</em> file that needs to be used so as to load the class from a Java® enabled browser, or using the appletviewer provided with the Java® Development Kit (JDK).</p>
<p>An <a href="http://java.sun.com/applets/index.html">applet</a> inherits (extending) the <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.applet.Applet.html#_top_">Applet</a> class provided by the <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.applet.Applet.html#_top_">java.applet</a> package of the Java® Core API. Here, the AWT Applet is used, mostly for historical reasons. Today, the Swing JApplet is preffered in most cases. In the following example the function <em>paint()</em>, which is inherited, is overridden by the new definition. This function is used to draw the applet in the browser, or the appletviewer.</p>
<p>myApplet.java:</p>
<blockquote>
<p><em>import java.applet.Applet;</em><br><em>import java.awt.Graphics;</em></p>
<p><em>public class myApplet  extends Applet</em><br><em>{</em><br><em>  public void paint(Graphics g)</em><br><em>  {</em><br><em>    g.drawString("Welcome to 1.124", 50, 35);</em><br><em>  }</em><br><em>}</em><br>
 </p>
</blockquote>
<p>The above program is compiled using the <a href="http://java.sun.com/docs/books/tutorial/getStarted/application/">javac</a> compiler, i.e. executing the command:</p>
<blockquote>
<p>        <em>javac myapplet.java</em></p>
</blockquote>
<p>The resulting file with the bytecode is the <em>myApplet.class</em> which takes its name from the name of the class. This file can be loaded and interpreted in any Java® enabled browser, or the appletviewer, using an <em>html</em> file.</p>
<p>The <em>html</em> code is used to specify at least the location and the dimensions of the applet to be loaded.</p>
<p>myApplet.html:</p>
<blockquote>
<p>&lt;HTML&gt;</p>
<p> &lt;HEAD&gt;<br>
 &lt;TITLE&gt; A simple program to run a Java Applet&lt;/TITLE&gt;<br>
 &lt;/HEAD&gt;</p>
<p> &lt;BODY&gt;<br>
    Here is the class myApplet is loaded:<br>
   &lt;APPLET CODE="myApplet.class" WIDTH=150 HEIGHT=100 align=center&gt;<br>
   &lt;/APPLET&gt;<br>
 &lt;/BODY&gt;</p>
<p>&lt;/HTML&gt;</p>
</blockquote>
<p><br>
It is possible to write a Java® program that can work both as an applet and as an application.</p>
<p>You can, also, find detailed instructions on how to write your first Java® program at the <a href="http://java.sun.com/docs/books/tutorial/getStarted/cupojava/index.html">Lesson: "Your First Cup of Java®"</a> of the on line <a href="http://java.sun.com/docs/books/tutorial/">Java® Tutorial</a>, which is provided by SUN.</p>
<h2 class="subhead">
<a id="3" name="3"></a>3. Data Types</h2>
<p>Java® has two kinds of data types, primitive and reference data types. <em>Primitive data type</em> variables contain a corresponding of the data type value, while <em>reference data type</em> variables, such as arrays and classes, contain a reference to the actual set of values.</p>
<p>The following are the primitive (or built-in) data types:</p>
<ul>
<li>
<em>boolean</em>  (boolean value, true or false)</li>
<li>
<em>char</em>  (2-byte, character - Unicode)</li>
<li>
<em>byte</em> (1-byte, signed integer)</li>
<li>
<em>short</em> (2-byte, signed short integer)</li>
<li>
<em>int</em> (4-byte, signed integer)</li>
<li>
<em>long</em> (8-byte, signed long integer)</li>
<li>
<em>float</em> (4-byte, floating point)</li>
<li>
<em>double</em> (8-byte, double precision floating point)</li>
</ul>
<p>It is allowable to assign the value of a primitive data type variable from one type to another without an explicit cast if the variable that the value is assigned is on the right of the following order list.</p>
<blockquote>
<p>                                 <em>byte</em> &lt; <em>short</em> &lt; <em>int</em> &lt; <em>long</em> &lt; <em>float</em> &lt; <em>double</em></p>
</blockquote>
<p>A <em>char</em> can be promoted to an <em>int, long, float</em> or <em>double.</em> However<em>,</em> a <em>boolean</em> cannot be converted to any other primitive data type, since boolean values are not considered to be numbers. The following table presents all the allowable promotions:<br>
 </p>
<div class="maintabletemplate">
<table class="tablewidth50" summary="See table caption for summary.">
<caption class="invisible">Grading information.</caption>
<thead><tr>
<th id="col1" scope="col">DATA TYPE</th>
<th id="col2" scope="col">ALLOWABLE PROMOTIONS</th>
</tr></thead>
<tbody>
<tr class="row">
<td>double</td>
<td>none</td>
</tr>
<tr class="alt-row">
<td>float</td>
<td>double</td>
</tr>
<tr class="row">
<td>long</td>
<td>float, double</td>
</tr>
<tr class="alt-row">
<td>int</td>
<td>long, float, double</td>
</tr>
<tr class="row">
<td>char</td>
<td>int, long, float, double</td>
</tr>
<tr class="alt-row">
<td>short</td>
<td>int, long, float, double</td>
</tr>
<tr class="row">
<td>byte</td>
<td>short, int, long, float, double</td>
</tr>
</tbody>
</table>
</div>
<p>An assignment from a "higher" order to a "lower" is allowed only when an explicit casting is used, because information may be lost from the conversion, e.g.: <em>int x = (int) 4.75;</em></p>
<p>Each of  the primitive data types has a corresponding class, called <em>wrapper</em> class, defined in the <a href="http://java.sun.com/products/jdk/1.1/docs/api/Package-java.lang.html">java.lang</a> package. e.g. a <em>double</em> primitive data type has the corresponding class <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.lang.Double.html#_top_">Double</a>.</p>
<h2 class="subhead">4. <a id="4" name="4"></a>Variables, Declarations, Definitions, Initializations, and Assignments</h2>
<p>The data type of every variable has to be specified in a definition, by preceding the name of the variable that is defined with a data type. A data type can be one of the built-in (primitive) data types, one of the data types defined in the provided Java® packages, or the user defined data type. The name of a variable must be a legal identifier and it should not be the same with any other variable that is defined in the same scope.</p>
<p>The scope of a variable is where the variable is accessible. It is specified by the location where the variable is defined. There are 4 different scope categories:</p>
<ol>
<li>
<em>local variables</em>: variables defined anywhere in a function</li>
<li>
<em>member variables</em>: data members of a class (static or non static)</li>
<li>
<em>function parameters</em>: parameters of functions in which values are passed when invoking the function</li>
<li>
<em>exception-handler parameters</em>: parameters of exception-handlers in which values are passed when the exception handler is called.</li>
</ol>
<p>Local variables are undefined prior to initialization. Therefore, a local variable must be either initialized or assigned a value before being used. The scope of a local variable is from the point where it has been defined up to the end of the code block in which it has been defined. The memory allocated for a local variable is automatically be reclaimed when control goes out of its scope, upon exiting the function in which it is defined.</p>
<p>The scope of a function or an exception-handler parameter is the entire corresponding function.</p>
<p>A named constant can be defined using the keywords <em>static</em> and <em>final.</em> Static indicates that it is a class variable, while final indicates that its value cannot be changed after it has been initialized.</p>
<blockquote>
<p>                e.g.: static final double PI = 3.1414926</p>
</blockquote>
<h2 class="subhead">5. <a id="5" name="5"></a>Operators, Precedence, Associativity, Type Conversions, and Mixed Expressions</h2>
<p>Java® has the following categories of operators. Some of them can be used as either unary or binary. Also in Java® the corresponding from the C++ conditional operator is a tertiary operator, i.e. having 3 operands.</p>
<ul>
<li>arithmetic: + , - , *, / , %</li>
<li>shorthand arithmetic: ++ , --</li>
<li>relational:  &gt; , &lt; , &gt;= , &lt;= , == , !=, instanceof</li>
<li>conditional: &amp;&amp; , || , ! ,  &amp;, |</li>
<li>assignment:  =</li>
<li>shorthand assignment: += , -= , *=  , /= , %=, etc.</li>
<li>bitwise and logical operators: &gt;&gt; ,&lt;&lt; , etc.</li>
<li>conditional operator: (logical Test) ? trueStatement : falseStatement</li>
</ul>
<p>The order in which the operations in expressions are performed is decided according to the <em>precedence</em> and <em>associativity</em> rules, which are the same as in C++. According to any precedence table, the operators of higher precedence are evaluated first, before operators with lower precedence.</p>
<p>The following <em>precedence</em> table (copied from the Java® Tutorial) lists the operators according to their precedence order. Higher precedence operators are evaluated before lower precedence operators.</p>
<div class="maintabletemplate">
<table class="tablewidth50" summary="See table caption for summary.">
<caption class="invisible">Grading information.</caption>
<tbody>
<tr class="row">
<td>postfix operators</td>
<td>[] . (params) expr++ expr--</td>
</tr>
<tr class="alt-row">
<td>unary operators</td>
<td>++expr --expr +expr -expr ~ !</td>
</tr>
<tr class="row">
<td>creation or cast</td>
<td>new (type)expr</td>
</tr>
<tr class="alt-row">
<td>multiplicative</td>
<td>* / %</td>
</tr>
<tr class="row">
<td>additive</td>
<td>+ -</td>
</tr>
<tr class="alt-row">
<td>shift</td>
<td>&lt;&lt; &gt;&gt; &gt;&gt;&gt;</td>
</tr>
<tr class="row">
<td>relational</td>
<td>&lt; &gt; &lt;= &gt;= instanceof</td>
</tr>
<tr class="alt-row">
<td>equality</td>
<td>== !=</td>
</tr>
<tr class="row">
<td>bitwise AND</td>
<td>&amp;</td>
</tr>
<tr class="alt-row">
<td>bitwise exclusive OR</td>
<td>^</td>
</tr>
<tr class="row">
<td>bitwise inclusive OR</td>
<td>|</td>
</tr>
<tr class="alt-row">
<td>logical AND</td>
<td>&amp;&amp;</td>
</tr>
<tr class="row">
<td>logical OR</td>
<td>||</td>
</tr>
<tr class="alt-row">
<td>conditional</td>
<td>? :</td>
</tr>
<tr class="row">
<td>assignment</td>
<td>= += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;=</td>
</tr>
</tbody>
</table>
</div>
<p>For operators on the same line, that have equal precedence, <em>associativity</em> decides which operator to be executed first. In Java® all operators, except the assignment operators, have left associativity.</p>
<h2 class="subhead">6. <a id="6" name="6"></a>Control Structures</h2>
<p>Control structures, similar to those of C++, are used to specify the flow of control in Java® programs.</p>
<p>A block of statements, i.e. statements within curly braces, may appear instead of a single statement.</p>
<p>The following are the control structures of Java®:</p>
<ul>
<li>Selection control structures</li>
</ul>
<p>            <em>if</em>(logical test)<br>
              statement;<br>
 </p>
<p>            <em>if</em>(logical test)<br>
                statement;<br>
           <em>else if</em>(logical test)<br>
                statement;<br>
           <em>else</em><br>
               statement;<br>
 </p>
<p>            <em>switch</em>(variable)<br>
                {<br>
                    case value1:<br>
                         statements<br>
                         break;<br>
                    case value3:<br>
                         statements<br>
                         break;<br>
                    case value4: case value5:<br>
                         statements<br>
                         break;<br>
                    default:<br>
                         statements<br>
                 }</p>
<ul>
<li>Repetition control structures (looping)</li>
</ul>
<p>          <em>for</em>(intialization ; logical test; modification)<br>
                  statement;<br>
 </p>
<p>          <em>while</em>(logical test)<br>
               statement;<br>
 </p>
<p>         <em>do</em><br>
             {<br>
               statements;<br>
              } <em>while(logical test);</em></p>
<p>Java® provides the <em>break</em> and <em>continue</em> as branching statements. The former cause the exit from the block of statements in which it resides, while the latter causes the flow of control to be transfer to the next iteration. There are also labeled versions of break and continue in which labels are used  where the control is transferred to the block with the specified label. The <em>labeled break</em> and the <em>labeled continue</em> are useful in nested loops. A <em>return</em> statement also is used to return form a function, passing control to the invoking function.</p>
<h2 class="subhead">
<a id="7" name="7"></a>7. Comments</h2>
<p>Java® supports 3 kinds of comments. The familiar C++ kinds of comments, the pair /* */ which encloses a comment and the // which indicates that the remaining of the line is a comment are supported.</p>
<p>In addition, Java® supports the documentation comment which is enclosed between /** and */. Comments of this kind are used for automatically generated documentation using the <em><a href="http://java.sun.com/products/jdk/javadoc/index.html">javadoc</a></em> tool of the Java® Development Kid (JDK).</p>
<p>Having wrote a java file, such as the file Welcome1.java below, using javadoc someone can automatically create an html file corresponding to that java source code.<br><br>
Welcome1.java:</p>
<blockquote>
<p><em>/**</em><br><em> * This class can take a variable number of parameters on the command</em><br><em> * line. Program execution begins with the main() method.</em><br><em> */</em><br><em>public class Welcome1</em><br><em>{</em><br><em>   /**</em><br><em>    * The main entry point for the application.</em><br><em>    *</em><br><em>    * @param args Array of parameters passed to the</em><br><em>    * application via the command line.</em><br><em>    */</em><br><em>   public static void main (String[] args)</em><br><em>   {</em><br><em>      System.out.println("Welcome to 1.124!!!!");</em><br><em>   }</em><br><em>}</em></p>
</blockquote>
<p>Then, the javadoc can be used to create the corresponding html file:</p>
<blockquote>
<p><em>&gt;javadoc Welcome1.ja</em><br><em>Loading source file Welcome1.java...</em><br><em>Constructing Javadoc information...</em><br><em>Building tree for all the packages and classes...</em><br><em>Building index for all the packages and classes...</em><br><em>Generating overview-tree.html...</em><br><em>Generating index-all.html...</em><br><em>Generating deprecated-list.html...</em><br><em>Building index for all classes...</em><br><em>Generating allclasses-frame.html...</em><br><em>Generating index.html...</em><br><em>Generating packages.html...</em><br><em>Generating Welcome1.html...</em><br><em>Generating serialized-form.html...</em><br><em>Generating package-list...</em><br><em>Generating help-doc.html...</em><br><em>Generating stylesheet.css...</em></p>
</blockquote>
<p><a id="8" name="8"></a></p>
<h2 class="subhead">8. Arrays</h2>
<p>An array is a set of values of the same data type stored together as an entity, in a contiguous part of memory, and can be accessed using an integer index.</p>
<p>The declaration of an array in Java does not make any memory allocation, but simply defines a reference to an array. A <em>new</em> statement is required to make the proper allocation of memory. Then, an element of the array is accessed using an index within square brackets. An array in Java® has a <em>length</em> field which stores the number of its elements.</p>
<p>The class <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.lang.System.html#_top_">System</a> has a function called <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.lang.System.html#arraycopy_java_lang_Object__int__java_lang_Object__int__int_">arraycopy()</a> that can be used to copy part or the whole array to another array.</p>
<p>A function in which an array is passed as an argument can change it, since the reference to that array is what is passed by value. An array can be returned from a function, i.e. the return data type of a function can be an array.</p>
<p>The length of an array is fixed upon its definition and cannot be modified. A class named <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.util.Vector.html#_top_">Vector</a> can be used to represent an array whose size can be modified.</p>
<p>An array can contain references to other arrays or objects, in which case memory for the individual members of the array must also be explicitly allocated using a new statement.</p>
<p>A multidimensional array can be defined using an array whose elements are arrays. If the array has the same number of columns then such an array is defined using a statement similar to the following: <em>double x[][] =  new double [n][m]</em>. Otherwise for each row a <em>new</em> expression is used to dynamically allocate memory for it.</p>
<p><em>Example of Arrays</em></p>
<blockquote>
<p><em>class introArrays</em><br><em>{</em><br><em>  public static final int SIZE=5;</em></p>
<p><em>  public static void main(String args[])</em><br><em>  {</em><br><em>    double d[] = new double[SIZE];</em><br><em>    int [] i ;</em><br><em>    i = new int[SIZE];</em></p>
<p><em>    for(int j=0 ; j&lt;d.length ; j++)</em><br><em>         d[j] = j/2;</em><br><em>    for(int j=0 ; j&lt;i.length ; j++)</em><br><em>         i[j] = j*j;</em></p>
<p><em>    for(int j=0 ; j&lt;SIZE ; j++)</em><br><em>      System.out.println( "  d[" + j + "] = " + d[j]);</em><br><em>    for(int j=0 ; j&lt;i.length ; j++)</em><br><em>      System.out.println( "  i[" + j + "] = " + i[j]);</em></p>
<p><em>    int m=5, n=3;</em><br><em>    int im, in;</em><br><em>   double x[][] = new double[m][n];</em></p>
<p><em>  for(im=0;im&lt;m;im++)</em><br><em>         {</em><br><em>             System.out.println();</em><br><em>            for(in=0;in&lt;n;in++)</em><br><em>                 {</em><br><em>                    System.out.print(" " + x[im][in] + " ");</em><br><em>                }</em><br><em>        }</em></p>
<p><em>  }</em><br><em>}</em></p>
</blockquote>
<p><br><em><strong>Output:</strong></em></p>
<blockquote>  <em>d[0] = 0.0</em><br><em>  d[1] = 0.0</em><br><em>  d[2] = 1.0</em><br><em>  d[3] = 1.0</em><br><em>  d[4] = 2.0</em><br><em>  i[0] = 0</em><br><em>  i[1] = 1</em><br><em>  i[2] = 4</em><br><em>  i[3] = 9</em><br><em>  i[4] = 16</em>
<p><em> 0.0  0.0  0.0</em><br><em> 0.0  0.0  0.0</em><br><em> 0.0  0.0  0.0</em><br><em> 0.0  0.0  0.0</em><br><em> 0.0  0.0  0.0</em><br>
 </p>
</blockquote>
<p>In Java® you can easily have a ragged array, such as a 2-D array with rows of different lengths. When an array is created only the length of the primary array must be specified. The length of the sub-arrays can be left unspecified until they are created, as it is shown in the following example.</p>
<p><em>Example of a Ragged Array</em></p>
<blockquote>
<p><em>class TriangularArray</em><br><em>  {</em><br><em>   public static void main(String args[])</em><br><em>      {</em><br><em>         int i, j;</em></p>
<p><em>         double [][]x;</em></p>
<p><em>          x = new double[5][];</em></p>
<p><em>         for(i=0;i&lt;5;i++)</em><br><em>             {</em><br><em>                 x[i] = new double[i+1];</em></p>
<p><em>                System.out.println();</em></p>
<p><em>                for(j=0;j&lt;i+1;j++)</em><br><em>                     {</em><br><em>                        x[i][j] = (i+1)*10+j+1;</em><br><em>                        System.out.print(" " + x[i][j] + " ");</em><br><em>                     }</em><br><em>       }</em><br><em>     }</em><br><em> </em></p>
</blockquote>
<p><em><strong>Output:</strong></em></p>
<blockquote>
<p><em> 11.0</em><br><em> 21.0  22.0</em><br><em> 31.0  32.0  33.0</em><br><em> 41.0  42.0  43.0  44.0</em><br><em> 51.0  52.0  53.0  54.0  55.0</em></p>
</blockquote>
<h2 class="subhead">9. Classes <a id="9" name="9"></a>and Objects</h2>
<p>In Java® every member function and data belongs to a <em>class</em> and must be defined into a class declaration, i.e. it is not allowable to have global functions and variables. A class may contain data (fields) and functions (methods), which can be class or non-class members of the class.</p>
<p>An object is an instance of a class. It is created using a <em>new</em> operator which instantiates the class, allocating memory for a new object, and initializes the objects data members, usually through constructors rather than directly. The <em>new</em> operator returns a reference to the new instance of the class that has been created, i.e. to the new object. The new object is referenced typically by the variable at the left side of the <em>new statement</em>. The declaration of an object, e.g. <em>Point p</em>, does not allocate any memory for an instance of the class Point. It simply declares that <em>p</em> can be used as a reference to an instance of the class <em>Point</em>. In Java® memory for objects is allocated from the heap using the keyword <em>new</em>. If there is not enough memory to be allocated the garbage collector may run to reclaim some memory and if there is still not enough memory an <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.lang.OutOfMemoryError.html#_top_"><em>OutOfMemoryError</em></a> exception is thrown. The variable that is associated with an object, in contrast to a variable of primitive data type, is actually a reference to that object.</p>
<p>A <em>class member data, or stat</em>ic field, is a field that is shared among all objects of that class, as in C++. Similarly, <em>static (or class) functions</em> are methods, that can operate on class member data (static fields), or perform operations on the entire class and not on a certain instance of the class (i.e. object). A static function can access only static members, variables or functions, of the class, since it is not invoked on a specific object. Static fields and methods are declared using the keyword <em>static</em> at its declaration. Class variables and methods are accessible from the class itself. There is no need to create an object, i.e. to instantiate the class in order to access its class (i.e. static) members. The static variables of a class are initialized before any use of any static variable and before the use of any of the member functions of the class.</p>
<p>When a class is defined it is required to use the keyword <em>class</em> followed by the name of the class in the class declaration. The class body, in curly braces, follows the class declaration. Other possible components of a class declaration are the <em>public</em>, <em>abstract</em>, <em>final, extends</em> (superclass), and <em>implements</em> (one or more interfaces). If any, or all, of these optional components are not provided the Java® compiler considers the defaults, which are nonpublic, non-abstract, non-final subclass of the class <em>Object</em> that does not implement any interface.</p>
<p>A <em>public</em> class is publicly accessible, i.e. it can be used by classes in any package, not necessarily classes in its package.</p>
<p>An <em>abstract</em> class is a class that cannot be instantiated, i.e. no objects of that class can be defined. An abstract class must necessarily be subclassed to be used, since it may contain methods with no implementation, i.e. abstract methods. an abstract class may provide definitions of all or some of the methods that the subclasses may inherit. Although an abstract class cannot be instantiated, a reference to an abstract class can be defined and used to achieve <em>polymorphism</em>. Typically, some of the functions are left to be implemented by the subclasses. If a class contains an abstract function then the class is abstract and cannot be instantiated. In that case the class should be explicitly specified as <em>abstract</em>.</p>
<p>A <em>final</em> class is a class that cannot be subclassed. Specifying a class as <em>final</em> automatically implies that all its methods are considered to be final. Specifying a class, or a function, as final may sometimes be useful, considering security and optimization issues.</p>
<p>The <em>extends &lt;superclass&gt;</em> specifies that the class that is declared is a subclass of the provided &lt;superclass&gt;.<br>
Finally, the <em>implements&lt;interface1&gt;, &lt;interface2&gt;,....,</em> specifies that the class implements one or more interfaces, whose names are provided after the keyword <em>implements</em> in a comma separated list.</p>
<p>Note that assigning a reference data type variable, i.e. a variable that refers to an instance of a class, to another reference variable then both variables refer to the same object. The function <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.lang.Object.html#clone__">clone()</a> may be used to actually make an actual complete copy of one object to another, i.e. copy the object state into a new identical object but in a different memory location.</p>
<p>The following is an example of a simple class. The class has two member data, x and y, and a class (or static) data and has no functions.</p>
<p><em>Example of a Simple Class</em></p>
<blockquote>
<p><em>class Point</em><br><em>{</em><br><em>  public double x, y=100;                        // data member (or field)</em><br><em>  public static int num = 0;                       // class or static data member</em><br><em>}</em></p>
<p><em>class introClasses</em><br><em>{</em><br><em>  public static void main(String args[])</em><br><em>  {</em><br><em>    Point p1;                                            // declaration of a Point object</em><br><em>    Point p2 = new Point();</em><br><em>    Point.num++;</em></p>
<p><em>    p1 = new Point();</em><br><em>    p1.y = 1.1;</em><br><em>    p1.x = 2.2;</em><br><em>    p2.num ++;</em><br><em>    System.out.println("Number = " + Point.num);</em><br><em>    System.out.print("\n p1:    x = " + p1.x + "      y = " + p1.y );</em><br><em>    System.out.println("\n p2:    x = " + p2.x + "      y = " + p2.y );</em><br><em>  }</em><br><em>}</em></p>
</blockquote>
<p><br><em> Output:</em></p>
<blockquote>
<p><em> Number = 2</em><br><em> p1:    x = 2.2      y = 1.1</em><br><em> p2:    x = 0.0      y = 100.0</em></p>
</blockquote>
<h2 class="subhead">
<a id="10" name="10"></a>10. Constructors</h2>
<p>A class can provide one or more constructors to make the proper initializations of newly created objects. As in C++, a constructor has the same name with the class and has no return type. Java® supports <em>constructor overloading</em>. Constructors are differentiated from each other from the number and type of their parameters. The compiler, upon an object creation, invokes the constructor that matches with the provided arguments. A constructor with no argument is known as the <em>default constructor</em> (or <em>no-argument constructor</em>). If no constructors are provided, Java® provides by default the no-argument (default) constructor which does nothing.  Upon the creation of an object its data fields are set to the default value of zero (for numeric types), '\u0000' (for char), false (for boolean), or null (for reference) depending on the variable's data type. Then, the initializers and initialization blocks are called to initialize the fields. Finally, the constructor is called, which first, invokes, explicitly or implicitly, its superclass constructor, and then the statements in the body of the constructor(s) are executed.</p>
<p>Another constructor of a class can be invoked from inside a constructor of that class using <em>this</em> which is a reference to the current object. This is called <em>explicit constructor invocation</em>. A constructor of a superclass can be invoked from inside a constructor using the <em>super</em> keyword followed by parentheses in which arguments may be provided. The invocation of a superclass constructor must be the first statement in the subclass constructor so as to perform first the super class initialization. Otherwise, the superclass default constructor will be invoked implicitly.</p>
<p>A constructor of a class can be specified as <em>private</em>, <em>protected</em>, <em>package</em>, and <em>public</em> which specifies which classes are eligible to create instances of that class. When a constructor is <em>private</em> no other class can instantiate the class and only if the class provides public classes to instantiate the class, an object can be created. When a constructor is specified as <em>protected,</em> only subclasses can use it to create objects of the class. If a constructor is specified as <em>public</em> any class can create an object of the class using the constructor. Finally, a <em>package</em> constructor can be used only by classes within the same package to create objects of the class.</p>
<p><em>Example on Constructors</em></p>
<blockquote>
<p><em>class Point</em><br><em>{</em><br><em>  private double x, y;</em></p>
<p><em>  Point()                           // default constructor</em><br><em>  {</em><br><em>    x = y = 0.0;</em><br><em>  }</em><br><em>  Point(double x, double y)         // constructor overloading</em><br><em>  {</em><br><em>    this.x = x;</em><br><em>    this.y = y;</em><br><em>  }</em></p>
<p><em>  public String toString()            // toString method</em><br><em>  {</em><br><em>    return ("x = " + x + "    y = " + y);</em><br><em>  }</em><br><em>}</em></p>
<p><em>class constructorsClasses</em><br><em>{</em><br><em>  public static void main(String args[])</em><br><em>  {</em><br><em>    Point p1= new Point(), p2;</em><br><em>    p2 = new Point(2.22,4.8);</em></p>
<p><em>    System.out.println("\n p1:    "  +  p1);</em><br><em>    System.out.println("\n p2:    "  +  p2);</em><br><em>    System.out.println();</em><br><em>  }</em><br><em>}</em></p>
</blockquote>
<p><br><strong><em>Output:</em></strong></p>
<blockquote>
<p><em> p1:    x = 0.0    y = 0.0</em><br><em> p2:    x = 2.22    y = 4.8</em></p>
</blockquote>
<h2 class="subhead">11. <a id="11" name="11"></a>Initializers</h2>
<p>In Java® someone can use <em>static initializers</em> and <em>instance initializers</em> to provide initial values for static (i.e. class) and instance (i.e. object) data members. Static initializers cannot call functions that are declared to throw checked exceptions.</p>
<p>If no values are provided to the variables of a class using either initializers or constructors a zero, '\u0000', false, or null value is assigned depending on the variable's data type.</p>
<p>The following example demonstrates the use of static and instance initializers.</p>
<p><em>Initializers Example</em></p>
<blockquote>
<p><em>class Initialization1</em><br><em>    {</em><br><em>      public static void main(String args[])</em><br><em>      {</em><br><em>        Point p = new Point();</em><br><em>        System.out.println("Number of points = " + Point.pointsNumber);</em><br><em>        System.out.println("(x,y) = (" + p.x + ","  + p.y + ")") ;</em><br><em>      }</em><br><em> }</em></p>
<p><em>class Point</em><br><em>    {</em><br><em>      double x=200, y=100;                     // instance initializer</em><br><em>      static int pointsNumber=1;               // static initializer</em><br><em>    }</em></p>
</blockquote>
<h2 class="subhead"><em>Output:</em></h2>
<blockquote>
<p><em>Number of points = 1</em><br><em>(x,y) = (200.0,100.0)</em></p>
</blockquote>
<p><br>
However, these initializations can be done only when using assignment statements, i.e. without the ability to call any other method, or throw an exception. For such cases a <em>static initialization block</em> can be used to initialize static members, while a constructor is, in general, used for the initialization of instance members. Constructors are called after the initializers have assigned the default values to the member data.</p>
<p>A <em>static initialization block</em> is a block enclosed with curly braces with the keyword static before it. The static initialization blocks and the static initializers are called in order from left to right and from top to bottom.</p>
<p><em>Static Initialization Block Example</em></p>
<blockquote>
<p><em>class Point</em><br><em>    {</em><br><em>      double x=200, y=100;           // instance initializer</em><br><em>      static int pointsNumber;</em></p>
<p><em>      static                                     // static initialization block</em><br><em>            {</em><br><em>               pointsNumber = 1;</em><br><em>              System.out.println("Inside static initialization block");</em><br><em>            }</em><br><em>    }</em><br>
 </p>
<p><em>    class Initialization2</em><br><em>    {</em></p>
<p><em>      public static void main(String args[])</em><br><em>       {</em><br><em>          System.out.println("Inside main");</em><br><em>          Point p = new Point();</em><br><em>          System.out.println("Number of points = " + Point.pointsNumber);</em><br><em>          System.out.println("(x,y) = " + p.x + ","  + p.y + ")") ;</em><br><em>       }</em><br><em>    }</em><br>
 </p>
</blockquote>
<p><em>Output:</em></p>
<blockquote>
<p><em>Inside main</em><br><em>Inside static initialization block</em><br><em>Number of points = 1</em><br><em>(x,y) = 200.0,100.0)</em></p>
</blockquote>
<p><br>
Java® supports also <em>instance initialization blocks</em> (or non-static initialization blocks) which are sometimes useful, such as in anonymous classes where having constructors is not possible. An instance initialization block is placed at the location where a new object of the class is created. The non-static initializers are executed upon the creation of an object before the invocation of the corresponding constructor. The order of execution of instance initializers and initialization blocks is again  from left to right and from top to bottom.</p>
<p>An <em>anonymous class</em> is a class without a name that is defined within another class. At the same time that it is defined an instance of it is created using the <em>new</em> keyword. Since an anonymous class has no name it cannot have any constructors.</p>
<h2 class="subhead">12. <a id="12" name="12"></a>Member Data and Functions</h2>
<p>Both member data and member functions are accessed and invoked, respectively, using an object reference followed by a dot and at the right of the dot the name of the data or function of the class. The object reference can be any expression that returns a reference to an object of the class, e.g. a <em>new</em> operator. In the invocation of an object's function, parentheses, which may contain provided arguments, follow the name of the function. Invoking a function of an object is known as "sending a message" to that object.</p>
<p>Member data (or member variables) are declared using the data type followed by the name of the variable. The <em>data type</em> can be any primitive or reference data type, while the <em>name</em> should be any legal Java® identifier. In addition, the following <em>attributes</em> can also be specified:</p>
<blockquote>
<ul>
<li>
<em>access level</em>: specifies the access level for this variable, which can be public, package, protected, and private.</li>
<li>
<em>static</em>: specifies that the variable is static (i.e. class) variable</li>
<li>
<em>final</em>: specifies that the value of the variable after it is assigned cannot be modified</li>
<li>
<em>transient</em>: indicates that the variable is transient, which is not yet fully specified</li>
<li>
<em>volatile</em>: indicates that the Java compiler should not perform certain optimizations on the variable</li>
</ul>
</blockquote>
<p><br>
Member functions are typically provided, as in C++, to operate on member data allowing data encapsulation, hiding data behind functions (methods). However, in Java® global functions are not allowable. Every function must be provided within a class definition. Also externally defined member functions are not possible in Java®, since everything must be defined within a class. Java® supports recursion, allowing a function to call itself either directly (direct recursion), or indirectly (indirect recursion) through another function.</p>
<p>A function has two parts, the <em>function declaration</em> and the <em>function body</em>. The function declaration must provide the return data type and the name of the function followed by parentheses that enclose the parameters of the function.<br><br>
A function may return a value or no value in which case it is declared as <em>void</em>. A function that returns an object of a class can return an object of any subclass of that class as well. In addition, a function may have an interface as a return type, in which case an object of any class that implements that interface may be returned.</p>
<p>The <em>function name</em> should be any legal Java® identifier. The name of a function can be the same as the name of a data member of the class. Java® supports, as C++, function overloading allowing functions to have the same name as long as the individual functions with the same name differs in the number or/and type of the parameters. The signature of a function is its name together with the number and type of its parameters. Functions with different signatures, although with the same name, are allowable.</p>
<p>A function may have no or any number of arguments. A function with no arguments is defined using empty parentheses. An argument with the same name as a member variable of the class hides the member variable. In that case the reference <em>this</em> can be used. The latter, i.e. <em>this,</em> is a reference that refers to the object with which the member function has been invoked. The reference <em>this</em> may be used to pass a reference to the object that has invoked the member function, as an argument to the member functions. Similarly the reference <em>super</em> refers to the superclass of a class and can be used when a member variable or function of a superclass is hidden. In Java, it is not possible to pass a function (or a pointer to a function) as an argument to a function.</p>
<p>All arguments to functions in Java® are passed by value, which means that primitive data type arguments and the actual references cannot be modified. The values of the parameters are copies of the values of the arguments passed to the function. Declaring a function parameter using the <em>final</em> modifier prohibits the modification of that parameter within the function.</p>
<p>A function declaration may also provide more information about it using any of the following <em>attributes</em>:</p>
<blockquote>
<ul>
<li>
<em>access level</em>: specifies the access level for this variable, which can be public, package, protected, and private.</li>
<li>
<em>static</em>: specifies that the function is static (i.e. class) function, i.e. that it is not associated with a certain object of the class</li>
<li>
<em>abstract:</em> indicates that the method is not implemented. Therefore, the class is abstract and cannot be instantiated.</li>
<li>
<em>final</em>: specifies that the function cannot be overridden by a subclass</li>
<li>native: indicates that the function is implemented in another language (e.g. C++)</li>
<li>
<em>synchronized</em>: indicates that certain precautions should be taken to ensure that functions that operate on same data, do it in a threat-safe way.</li>
<li>
<em>throw</em>s <em>&lt;exceptions&gt;</em>: specifies the checked exceptions that the function may throw</li>
</ul>
</blockquote>
<p>An implicit reference to the object with which a function is invoked, called <em>this</em>, is available in every non-class (i.e. non-static) function. It is used to explicitly refer to members of the object that have invoked the function, or when an object reference is required.</p>
<p>A function of a class with the name <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.lang.Object.html#toString__">toString</a>() that takes no arguments and returns a <a href="http://java.sun.com/products/jdk/1.1/docs/api/java.lang.String.html#_top_">String</a> is a special function. It allows the object to be used in a string concatenation using the + operator, e.g. in a <em>println</em> statement. Note that all the primitive data type variables are implicitly converted to <em>String</em> objects whenever they are used in <em>String</em> expressions.</p>
<p>In Java® there is no need to worry about explicitly destroying objects that are not needed anymore. Java® provides a garbage collector that periodically frees memory of objects that are no more being referenced. When a variable that is used to reference to an object goes out of scope or it is set to null, that object, if not referenced by any other variable becomes eligible for <em>garbage collection</em>.<br>
 </p>
<p><em>Example on Member Data and Methods</em></p>
<blockquote>
<p><em>class Point</em><br><em>{</em><br><em>  private static int num = 0;        // static field</em><br><em>  private double x, y;                      // non-static data members (fields)</em></p>
<p><em>  /* set methods */</em><br><em>  public void setX(double x)</em><br><em>  {</em><br><em>    this.x = x;</em><br><em>  }</em><br><em>  public void setY(double yy)</em><br><em>  {</em><br><em>    y = yy;</em><br><em>  }</em><br><em>  public static void incrNum()    // static method</em><br><em>  {</em><br><em>    num++;</em><br><em>  }</em></p>
<p><em>  /* get methods */</em><br><em>  public double getX()</em><br><em>  {</em><br><em>    return x;</em><br><em>  }</em><br><em>  public double getY()</em><br><em>  {</em><br><em>    return y;</em><br><em>  }</em><br><em>  public static int getNum()     // static function</em><br><em>  {</em><br><em>    return num;</em><br><em>  }</em></p>
<p><em>  public String toString()            // toString method</em><br><em>  {</em><br><em>    return ("x = " + x + "    y = " + y);</em><br><em>  }</em><br><em>}</em><br>
 </p>
<p><em>class methodsClasses</em><br><em>{</em><br><em>  public static void main(String args[])</em><br><em>  {</em><br><em>    Point p1, p2 = new Point();</em><br><em>    Point.incrNum();</em></p>
<p><em>    p1 = new Point();</em><br><em>    p1.incrNum();</em></p>
<p><em>    p1.setX(1.1);</em><br><em>    p2.setX(2.2);</em></p>
<p><em>    System.out.print("\nNumber = " + Point.getNum());</em></p>
<p><em>    p1.setY(0.11111);</em></p>
<p><em>    System.out.print("\n p1:   x = " + p1.getX() + "     y = " + p1.getY() );</em><br><em>    System.out.print("\n p2:   " + p2 );</em><br><em>    System.out.println();</em><br><em>  }</em><br><em>}</em></p>
</blockquote>
<p><br><strong><em> Output:</em></strong></p>
<blockquote>
<p><em>Number = 2</em><br><em> p1:   x = 1.1     y = 0.11111</em><br><em> p2:   x = 2.2     y = 0.0</em></p>
</blockquote>
<h2 class="subhead">
<a id="13" name="13"></a>13. Function Overloading</h2>
<p>Java® allows function overloading with which the selection of the function is based on its signature. The signature of a function is its name and the number and type of its parameters, i.e. the return type of a function is not part of its signature.</p>
<p><em>Example on Function Overloading</em></p>
<blockquote>
<p><em>class methodsOverloading<br>
{<br>
  public static void main(String args[])<br>
  {<br>
    myPrint();<br>
    myPrint(3);<br>
    myPrint(1.7);<br>
  }</em></p>
<p><em>  public static void myPrint()<br>
  {<br>
    System.out.println(" Inside myPrint()");<br>
  }<br>
  public static void myPrint(int i)<br>
  {<br>
    System.out.println(" Inside myPrint():    i =" + i);<br>
  }<br>
  public static void myPrint(double x)<br>
  {<br>
    System.out.println(" Inside myPrint():   x = " + x );<br>
  }<br>
}</em></p>
</blockquote>
<p><strong><em> Output:</em></strong></p>
<blockquote>
<p> Inside myPrint()<br>
 Inside myPrint():    i =3<br>
 Inside myPrint():   x = 1.7</p>
</blockquote>
	                    

	        			
	                    
	                    
	                    	
	                    

            		 </main><!--Course_inner_section tag close --><div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->             
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom"><div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index-->
<div id="footer">
<nav aria-label="Footer"><nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses"><span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-footer&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
</ul></nav><div id="foot-c2" class="grid_2">
<nav aria-labelledby="f-about"><span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
    <li><a href="https://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li>
</ul></nav><!--about--><nav aria-labelledby="f-tools"><span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>
    <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul></nav><!--tools-->
</div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate"><span id="f-donate" class="footer" aria-hidden="true">Donate</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/donate">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
    <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul></nav><div class="grid_2" id="foot-c4"><nav aria-labelledby="f-featured-sites"><span id="f-featured-sites" class="footer" aria-hidden="true">Featured Sites</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=featured-sites">OCW Educator</a></li>
    <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
    <li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT+K12 Videos">MIT+K12 Videos</a></li>
    <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
    <li><a href="https://outreach.mit.edu/" aria-label="External Link: Outreach at MIT">Outreach@MIT</a></li>
    <li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
</ul></nav></div>
</nav><!--Footer Nav>--><aside id="foot-c5" class="grid_4 omega" aria-labelledby="f-our-corporate-supporters" style="min-height: 289px;"><span id="f-our-corporate-supporters" class="footer" aria-hidden="true">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside><aside class="grid_12 alpha omega" aria-label="OCW 15th Anniversary" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px; font-weight: bold;"><span style="text-transform: uppercase;">MIT OpenCourseWare's</span> 15th anniversary</span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro" src="../../../common/images/logo_sapient.png"></a></p>
</aside><aside class="grid_12 alpha omega" aria-labelledby="f-about-ocw" itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;"><span id="f-about-ocw" class="footer" aria-hidden="true">             About <span itemprop="name">MIT OpenCourseWare</span></span>
<p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">OCW is a free and open publication of material from thousands of MIT courses, covering the entire MIT curriculum. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu">               <img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology" src="../../../common/images/logo_mit.png"></a>             <a href="http://odl.mit.edu">               <img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning" src="https://ocw.mit.edu/images/logo_odl.png"></a>             <a href="http://www.oeconsortium.org/">               <img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium" src="https://ocw.mit.edu/images/logo_oec.png"></a>             <a itemprop="useRightsUrl" rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">               <img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons" src="../../../common/images/cc_by-nc-sa.png"></a>
</div>
<div id="f-legal" class="grid_12 alpha omega" style="border-top: none;">
<p class="copyright">© 2001–2015<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</aside>
</div>
<!--footer-->   <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->
</body>
</html>
