<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Custom Graphics | Lecture Notes | Foundations of Software Engineering | Civil and Environmental Engineering | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="1-124j-foundations-of-software-engineering-fall-2000" name="WT.cg_n">
<meta content="Custom Graphics" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Amaratunga, Kevin" name="Author">
<meta content="modern software development,engineering and information technology,component-based software,C#,.NET,data structures,algorithms for modeling,analysis,visualization,basic problem-solving techniques,web services,management and maintenance of software,sorting,searching,algorithms,numerical simulation techniques,image processing,computational geometry,finite element methods,network methods,e-business applications,classes,objects,inheritance,virtual functions,abstract classes,polymorphism,Java applications,applets,Abstract Windowing Toolkit,Graphics,Threads,Java,C++,information technology,engineering,modeling algorithms,basic problem-solving,software management,software maintenance,searching algorithms,numerical simulation,object oriented programming,1.124J,2.159J,13.470J,1.124,2.159,13.470,Software Design and Engineering" name="keywords">
<meta content="1.124J Foundations of Software Engineering | Custom Graphics" name="Search_Display">
<meta content="Software Design and Engineering" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link href="https://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="https://ocw.mit.edu/courses/civil-and-environmental-engineering/1-124j-foundations-of-software-engineering-fall-2000/lecture-notes/custom_graphics">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/expandy.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top"><div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW"><table class="social"><tbody><tr>
<td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Google+" href="https://plus.google.com/104567381989352550847/posts"><img src="../../../common/images/icon_gp.png" alt="Click to visit our Google+ page."></a>                   <a aria-label="Pinterest" href="https://www.pinterest.com/mitocw/pins/"><img src="../../../common/images/icon_pin.png" alt="Click to visit our Pinterest page."></a>                   <a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>                   <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="../../../common/images/icon_tw.png" alt="Click to visit our Twitter feed."></a>
</td>
        </tr></tbody></table></aside><nav aria-label="Help Links" class="helplinks"><a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/jsp/feedback.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<nav id="mega" class="grid_8 alpha" aria-label="Site"><ul id="menu" role="presentation">
<li id="menu_home">
        <a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
    </li>
<!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses" class="selected">
      <a href="#" aria-hidden="true">Find Courses</a><!-- Begin 5 columns Item -->
      <div class="dropdown_5columns-a mega-courses">
        <div class="col_1a">
          <div class="row_1a">
            <nav aria-labelledby="mm-find-courses-by"><span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
              <ul class="find_by" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
            		<li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-megamenu&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
							</ul></nav><nav aria-labelledby="mm-collections"><span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
              <ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
              </ul></nav><nav class="col_1b" aria-labelledby="mm-translated-courses"><span id="mm-translated-courses" class="nav" aria-hidden="true">Translated Courses</span>
							<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/spanish" aria-label="Spanish">Español / Spanish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/portuguese" aria-label="Portuguese">Português / Portuguese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/persian" aria-label="Persian">فارسی / Persian</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses">More...</a></li>
							</ul></nav>
</div>
          <div class="row_1b">
            <nav aria-labelledby="mm-cross-disciplinary-topic-lists"><span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Cross-Disciplinary Topic Lists</span>
            	<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
              	<li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
              </ul></nav>
</div>
        </div>

      </div>
    </li>
    <li id="drop_2">
        <a href="" aria-hidden="true">About</a>
        <div class="dropdown_1column-a">
            <nav class="col_1" aria-label="About"><ul role="presentation">
<li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
                    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
                    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
                </ul></nav>
</div>
    </li>
    <li id="drop_3">
        <a href="" aria-hidden="true">Donate</a>
        <div class="dropdown_1column-a">
          <nav class="col_1" aria-label="Donate"><ul role="presentation">
<li><a href="https://ocw.mit.edu/donate/">Make a Donation</a></li>
              <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
              <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
              <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
              <li><a href="https://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
              <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
            </ul></nav>
</div>
    </li>
    <li id="drop_4">
      <a href="" aria-hidden="true">Featured Sites</a>
      <div class="dropdown_1column-a">
        <nav class="col_1" aria-labelledby="mm-featured-sites"><span id="mm-featured-sites" class="nav" aria-hidden="true">OCW Initiatives</span>
          <ul role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
            <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=featured-sites">OCW Educator</a></li>
            <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
            <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
					</ul></nav><nav class="col_1" aria-labelledby="mm-featured-external-links"><span id="mm-featured-external-links" class="nav" aria-hidden="true">Beyond OCW</span>
					<ul>
<li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT Plus K12 Videos">MIT+K12 Videos</a></li>
            <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
						<li><a href="https://outreach.mit.edu" aria-label="External Link: Outreach at MIT">Outreach @ MIT</a></li>
						<li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
          </ul></nav>
</div>
    </li>
  </ul></nav><div id="search" role="search" class="grid_4 omega">
  
    <form aria-label="Advanced Search" method="get" action="../../../common/search/AdvancedSearch.htm">
		  <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td>
            <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>
            <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
          </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end --><div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb"><p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/civil-and-environmental-engineering">Civil and Environmental Engineering</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Foundations of Software Engineering</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/lecture-notes/index.htm">Lecture Notes</a>
            
                »
                
            
            
         
    
    
        
            
            
            Custom Graphics
         
    
</p>

                 </nav><div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Custom Graphics
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course"><script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/lecture-notes/index.htm">
		                  Lecture Notes  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/recitations/index.htm">
		                  Recitations  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/projects/index.htm">
		                  Projects  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends --></nav><main id="course_inner_section" aria-labelledby="section_title"><h2 class="subhead">Topics</h2>
<ol>
<li>
<a href="#1">Custom Painting</a> </li>
<li>
<a href="#2">Simple 2D Graphics</a> </li>
<li>
<a href="#3">A Graphics Example</a> </li>
</ol>
<h2 class="subhead">
<a id="1" name="1"></a>1. Custom Painting</h2>
<h3 class="subsubhead"><em>(Ref. <a href="http://java.sun.com/docs/books/tutorial/uiswing/painting/index.html">Java® Tutorial</a>)</em></h3>
<p>So far, we have seen user interface components that display static content. The individual components posessed sufficient knowledge to draw themselves and so we did not have to do anything special beyond creating the components and describing their layout. If a component is obscured by some other window and then uncovered again, it is the job of the window system to make sure that the component is properly redrawn.</p>
<p>There are instances, however, where we will want to change the appearance of a component e.g. we may wish to draw a graph, display an image or even display an animation within the component. This requires the use of custom painting code. The recommended way to implement custom painting is to extend the <em>JPanel</em> class. We will need to be concerned with two methods:</p>
<ul>
<li>The <em>paintComponent()</em> method specifies what the component should draw. We can override this method to draw text, graphics, etc. The <em>paintComponent()</em> method should never be called directly. It will be called indirectly, either because the window system thinks that the component should draw itself or because we have issued a call to <em>repaint()</em>.</li>
<li>The <em>repaint()</em> method forces the screen to update as soon as possible. It results in a call to the <em>paintComponent()</em> method. <em>repaint()</em> behaves asynchronously i.e. it returns immediately without waiting for the <em>paintComponent()</em> method to complete.</li>
</ul>
<p>The following code illustrates how custom painting works. A <em>JPanel</em> subclass is used to listen to mouse events and then display a message at the location where the mouse is pressed or released.</p>
<p><em>import javax.swing.*;</em><br><em>import java.awt.*;</em><br><em>import java.awt.event.*;</em></p>
<p><em>class Main {</em><br><em>    public static void main(String[] args0) {</em><br><em>        JFrame frame = new JFrame();</em><br><em>        frame.setSize(400, 400);</em></p>
<p><em>        DrawingArea drawingArea = new DrawingArea();</em><br><em>        frame.getContentPane().add(drawingArea);</em></p>
<p><em>        frame.addWindowListener(new WindowAdapter() {</em><br><em>            public void windowClosing(WindowEvent e) {</em><br><em>                System.exit(0);</em><br><em>            }</em><br><em>        });</em><br><em>        frame.setVisible(true);</em><br><em>    }</em><br><em>}</em></p>
<p><em>class DrawingArea extends JPanel {</em><br><em>    private String mText;</em><br><em>    private static String mStr1 = "The mouse was pressed here!";</em><br><em>    private static String mStr2 = "The mouse was released here!";</em><br><em>    private int miX, miY;</em></p>
<p><em>    // The constructor simply registers the drawing area to receive mouse events from itself.</em><br><em>    public DrawingArea() {</em><br><em>        addMouseListener(new MouseAdapter() {</em><br><em>            public void mousePressed(MouseEvent e) {</em><br><em>                miX = e.getX();</em><br><em>                miY = e.getY();</em><br><em>                mText = mStr1;</em><br><em>                repaint();</em><br><em>            }</em><br><em>            public void mouseReleased(MouseEvent e) {</em><br><em>                miX = e.getX();</em><br><em>                miY = e.getY();</em><br><em>                mText = mStr2;</em><br><em>                repaint();</em><br><em>            }</em><br><em>        });</em><br><em>    }</em></p>
<p><em>    // The paint method.  This gets called in response to repaint().</em><br><em>    public void paintComponent(Graphics g) {</em><br><em>        super.paintComponent(g);           // This paints the background.</em><br><em>        if (mText != null)</em><br><em>            g.drawString(mText, miX, miY);</em><br><em>    }</em><br><em>}</em></p>
<p>Note that prior to the introduction of the Swing package, one would override the <em>paint()</em> method to implement custom painting. In Swing applications, however, we override the  <em>paintComponent()</em> method instead. The <em>paintComponent()</em> method will be called by the <em>paint()</em> method in class <em>JComponent</em>. The <em>JComponent</em>'s <em>paint()</em> method also implements features such as double buffering, which are useful in animation.</p>
<h2 class="subhead">
<a id="2" name="2"></a>2. Simple 2D Graphics</h2>
<p>The <em>paintComponent()</em> method gives us a graphics context, which is an instance of a <em>Graphics</em> subclass. A graphics context bundles information such as the area into which we can draw, the font and color to be used, the clipping region, etc. Note that we do not instantiate the graphics context in our program; in fact the <em>Graphics</em> class itself is an abstract class. The <em>Graphics</em> class provides methods for drawing simple graphics primitives, like lines, rectangles, ovals, arcs and polygons. It also provides methods for drawing text, as we saw above.</p>
<p>This program illustrates how to draw some basic shapes.</p>
<p><em>import javax.swing.*;</em><br><em>import java.awt.*;</em><br><em>import java.awt.event.*;</em></p>
<p><em>class Main {</em><br><em>    public static void main(String[] args0) {</em><br><em>        JFrame frame = new JFrame();</em><br><em>        frame.setSize(400, 400);</em></p>
<p><em>        DrawingArea drawingArea = new DrawingArea();</em><br><em>        frame.getContentPane().add(drawingArea);</em><br><em>        frame.addWindowListener(new WindowAdapter() {</em><br><em>            public void windowClosing(WindowEvent e) {</em><br><em>                System.exit(0);</em><br><em>            }</em><br><em>        });</em><br><em>        frame.setVisible(true);</em><br><em>    }</em><br><em>}</em></p>
<p><em>class DrawingArea extends JPanel {</em><br><em>    public void paintComponent(Graphics g) {</em><br><em>        super.paintComponent(g);</em></p>
<p><em>        // Draw some simple geometric primitives.</em><br><em>        g.setColor(Color.red);</em><br><em>        g.drawLine(10, 10, 40, 50);                                            // x1, y1, x2, y2</em></p>
<p><em>        g.setColor(Color.green);</em><br><em>        g.drawRect(100, 100, 40, 30);                                        // x, y, width, height</em></p>
<p><em>        g.setColor(Color.yellow);</em><br><em>        g.drawOval(100, 200, 30, 50);                                        // x, y, width, height</em></p>
<p><em>        g.setColor(Color.blue);</em><br><em>        g.drawArc(200, 200, 50, 30, 45, 90);                             // x, y, width, height, start angle, arc angle</em></p>
<p><em>        int x1_points[] = {100, 130, 140, 115, 90};</em><br><em>        int y1_points[] = {300, 300, 340, 370, 340};</em><br><em>        g.setColor(Color.black);</em><br><em>        g.drawPolygon(x1_points, y1_points, x1_points.length);   // x array, y array, length</em></p>
<p><em>        int x2_points[] = {300, 330, 340, 315, 290};</em><br><em>        int y2_points[] = {300, 300, 340, 370, 340};</em><br><em>        g.setColor(Color.cyan);</em><br><em>        g.drawPolyline(x2_points, y2_points, x2_points.length);    // x array, y array, length</em></p>
<p><em>        g.setColor(Color.orange);</em><br><em>        g.fillRect(300, 100, 40, 30);                                             // x, y, width, height</em></p>
<p><em>        g.setColor(Color.magenta);</em><br><em>        g.fill3DRect(300, 200, 40, 30, true);                                // x, y, width, height, raised</em><br><em>    }</em><br><em>}</em></p>
<p>The <a href="http://java.sun.com/docs/books/tutorial/2d/index.html">Java® 2D API</a> provides a range of advanced capabilities, such as stroking and filling, affine transformations, compositing and transparency.</p>
<h2 class="subhead">
<a id="3" name="3"></a>3. A Graphics Example</h2>
<p>Here is a complete program that allows you to interactively define points, lines and polygon using mouse input. This program can be run either as an application or as an applet.</p>
<p><em>// This is a Java graphics example that can be run either as an applet or as an application.</em><br><em>// Created by Kevin Amaratunga 10/17/1997.  Converted to Swing 10/17/1999.</em></p>
<p><em>import javax.swing.*;</em><br><em>import java.awt.*;</em><br><em>import java.awt.event.*;</em><br><em>import java.util.*;</em></p>
<p><em>// In order to run as an applet, class Geometry must be declared as a public class.  Note that there</em><br><em>// cannot  be more than one public class in a .java file.  Also, the public class must have the same</em><br><em>// same name as the .java file.</em><br><em> public class Geometry extends JApplet {</em><br><em>    JTextArea mTextArea;</em><br><em>    DrawingArea mDrawingArea;</em></p>
<p><em>    public Geometry() {</em><br><em>        // Get the applet's container.</em><br><em>        Container c = getContentPane();</em></p>
<p><em>        // Choose a layout manager.  BorderLayout is a straightforward one to use.</em><br><em>        c.setLayout(new BorderLayout());</em></p>
<p><em>       // Create a drawing area and add it to the center of the applet.</em><br><em>       mDrawingArea = new DrawingArea(this);</em><br><em>       c.add("Center", mDrawingArea);</em></p>
<p><em>       // Create a read only text area to be used for displaying</em><br><em>       // information.  Add it to the bottom of the applet.</em><br><em>       mTextArea = new JTextArea();</em><br><em>       JScrollPane scrollPane = new JScrollPane(mTextArea);</em><br><em>       scrollPane.setPreferredSize(new Dimension(600, 100));</em><br><em>       mTextArea.setEditable(false);</em><br><em>       c.add("South", scrollPane);</em><br><em>    }</em></p>
<p><em>    public JTextArea getTextArea() {</em><br><em>        return mTextArea;</em><br><em>    }</em></p>
<p><em>    public static void main(String args[]) {</em><br><em>        // Create the applet object.</em><br><em>        Geometry geomApplet = new Geometry();</em></p>
<p><em>        // Create a frame.  Then set its size and title.</em><br><em>        JFrame frame = new JFrame();</em><br><em>        frame.setSize(600, 600);</em><br><em>        frame.setTitle(geomApplet.getClass().getName());</em></p>
<p><em>        // Make the frame closable.</em><br><em>        WindowListener listener = new WindowAdapter() {</em><br><em>            // An anonymous class that extends WindowAdapter.</em><br><em>            public void windowClosing(WindowEvent e) {</em><br><em>                System.out.println("Window closing");</em><br><em>                System.exit(0);</em><br><em>            }</em><br><em>        };</em><br><em>        frame.addWindowListener(listener);</em></p>
<p><em>        // Add the applet to the center of the frame.</em><br><em>        frame.getContentPane().add("Center", geomApplet);</em></p>
<p><em>        // Initialize the applet.</em><br><em>        geomApplet.init();</em></p>
<p><em>        // Make the frame visible.</em><br><em>        frame.setVisible(true);</em></p>
<p><em>        // Start the applet.</em><br><em>        geomApplet.start();</em><br><em>    }</em><br><em>}</em><br>
 </p>
<p><em>// The drawing area is the area within all the objects will be drawn.</em><br><em>class DrawingArea extends JPanel implements MouseListener {</em><br><em>    // Parent and child widgets.</em><br><em>    Geometry mGeomApplet;                     // The parent applet.</em><br><em>    JPopupMenu mPopupMenu;                 // Popup menu for creating new objects.</em></p>
<p><em>    // Object lists.</em><br><em>    Vector mPointList;                             // List of all Point objects.</em><br><em>    Vector mLineList;                               // List of all Line objects.</em><br><em>    Vector mPolygonList;                         // List of all Polygon objects.</em></p>
<p><em>    // Constants that indicate which kind of object (if any) is currently being created.</em><br><em>    static final int NO_OBJECT = 0;</em><br><em>    static final int POINT_OBJECT = 1;</em><br><em>    static final int LINE_OBJECT = 2;</em><br><em>    static final int POLYGON_OBJECT = 3;</em></p>
<p><em>    // Miscellaneous state variables.</em><br><em>    int miLastButton = 0;                        // Last button for which an event was received.</em><br><em>    int miAcceptingInput = 0;                  // Type of object (if any) that we are currently creating.</em><br><em>    int miPointsEntered = 0;                   // Number of points entered for this object so far.</em><br><em>    Object mCurrentObject = null;           // The object that we are currently creating.</em><br>
 </p>
<p><em>    // DrawingArea constructor.</em><br><em>    DrawingArea(Geometry geomApplet) {</em><br><em>        JMenuItem menuItem;</em></p>
<p><em>        mGeomApplet = geomApplet;</em></p>
<p><em>        // Set the background color.</em><br><em>        setBackground(Color.white);</em></p>
<p><em>        // Register the drawing area to start listening to mouse events.</em><br><em>        addMouseListener(this);</em></p>
<p><em>        // Create a popup menu and make it a child of the drawing area, but don't show it just yet.</em><br><em>        mPopupMenu = new JPopupMenu("New Object");</em><br><em>        menuItem = new JMenuItem("Point");</em><br><em>        menuItem.addActionListener(new PointActionListener(this));</em><br><em>        mPopupMenu.add(menuItem);</em><br><em>        menuItem = new JMenuItem("Line");</em><br><em>        menuItem.addActionListener(new LineActionListener(this));</em><br><em>        mPopupMenu.add(menuItem);</em><br><em>        menuItem = new JMenuItem("Polygon");</em><br><em>        menuItem.addActionListener(new PolygonActionListener(this));</em><br><em>        mPopupMenu.add(menuItem);</em><br><em>        add(mPopupMenu);</em></p>
<p><em>        // Create the object lists with a reasonable initial capacity.</em><br><em>        mPointList = new Vector(10);</em><br><em>        mLineList = new Vector(10);</em><br><em>        mPolygonList = new Vector(10);</em><br><em>    }</em><br>
 </p>
<p><em>    // The paint method.</em><br><em>    public void paintComponent(Graphics g) {</em><br><em>        int i;</em></p>
<p><em>        // Paint the background.</em><br><em>        super.paintComponent(g);</em></p>
<p><em>        // Draw all objects that are stored in the object lists.</em><br><em>        for (i = 0; i &lt; mPointList.size(); i++) {</em><br><em>            Point point = (Point)mPointList.elementAt(i);</em><br><em>            g.fillRect(point.x-1, point.y-1, 3, 3);</em><br><em>        }</em></p>
<p><em>        for (i = 0; i &lt; mLineList.size(); i++) {</em><br><em>            Line line = (Line)mLineList.elementAt(i);</em><br><em>            line.draw(g);</em><br><em>        }</em></p>
<p><em>        for (i = 0; i &lt; mPolygonList.size(); i++) {</em><br><em>            Polygon polygon = (Polygon)mPolygonList.elementAt(i);</em><br><em>            int j;</em></p>
<p><em>            g.setColor(Color.red);</em><br><em>            g.drawPolygon(polygon);</em><br><em>            g.setColor(Color.black);</em><br><em>            for (j = 0; j &lt; polygon.npoints; j++) {</em><br><em>                g.fillRect(polygon.xpoints[j], polygon.ypoints[j], 3, 3);</em><br><em>            }</em><br><em>        }</em></p>
<p><em>        // Draw as much of the current object as available.</em><br><em>        switch (miAcceptingInput) {</em><br><em>        case LINE_OBJECT:</em><br><em>            Line line = (Line)mCurrentObject;</em><br><em>            if (line.mb1 &amp;&amp; !line.mb2)</em><br><em>                g.fillRect(line.mEnd1.x-1, line.mEnd1.y-1, 3, 3);</em><br><em>            break;</em></p>
<p><em>        case POLYGON_OBJECT:</em><br><em>            Polygon polygon = (Polygon)mCurrentObject;</em><br><em>            int j;</em><br><em>            g.setColor(Color.red);</em><br><em>            g.drawPolyline(polygon.xpoints, polygon.ypoints, polygon.npoints);</em><br><em>            g.setColor(Color.black);</em><br><em>            for (j = 0; j &lt; polygon.npoints; j++) {</em><br><em>                g.fillRect(polygon.xpoints[j], polygon.ypoints[j], 3, 3);</em><br><em>            }</em><br><em>            break;</em></p>
<p><em>        default:</em><br><em>            break;</em><br><em>        }</em></p>
<p><em>        // Draw some text at the top of the drawing area.</em><br><em>        int w = getSize().width;</em><br><em>        int h = getSize().height;</em><br><em>        g.drawRect(0, 0, w - 1, h - 1);</em><br><em>        g.setFont(new Font("Helvetica", Font.PLAIN, 15));</em><br><em>        g.drawString("Drawing area", (w - g.getFontMetrics().stringWidth("Drawing area"))/2, 10);</em><br><em>    }</em><br>
 </p>
<p><em>    // The next five methods are required, since we implement the</em><br><em>    // MouseListener interface.  We are only interested in mouse pressed</em><br><em>    // events.</em><br><em>    public void mousePressed(MouseEvent e) {</em><br><em>        int iX = e.getX();  // The x and y coordinates of the</em><br><em>        int iY = e.getY();  // mouse event.</em><br><em>        int iModifier = e.getModifiers();</em></p>
<p><em>        if ((iModifier &amp; InputEvent.BUTTON1_MASK) != 0) {</em><br><em>            miLastButton = 1;</em></p>
<p><em>            // If we are currently accepting input for a new object,</em><br><em>            // then add the current point to the object.</em><br><em>            if (miAcceptingInput != NO_OBJECT)</em><br><em>                addPointToObject(iX, iY);</em><br><em>        }</em><br><em>        else if ((iModifier &amp; InputEvent.BUTTON2_MASK) != 0) {</em><br><em>            miLastButton = 2;</em></p>
<p><em>        }</em><br><em>        else if ((iModifier &amp; InputEvent.BUTTON3_MASK) != 0) {</em><br><em>            miLastButton = 3;</em></p>
<p><em>            if (miAcceptingInput == NO_OBJECT) {</em><br><em>                // Display the popup menu provided we are not accepting</em><br><em>                // any input for a new object.</em><br><em>                mPopupMenu.show(this, iX, iY);</em><br><em>            }</em><br><em>            else if (miAcceptingInput == POLYGON_OBJECT) {</em><br><em>                // If current object is a polygon, finish it.</em><br><em>                mPolygonList.addElement(mCurrentObject);</em><br><em>                String str = "Finished creating polygon object.\n";</em><br><em>                mGeomApplet.getTextArea().append(str);</em><br><em>                mGeomApplet.repaint();</em><br><em>                miAcceptingInput = NO_OBJECT;</em><br><em>                miPointsEntered = 0;</em><br><em>                mCurrentObject = null;</em><br><em>            }</em><br><em>        }</em><br><em>    }</em></p>
<p><em>    public void mouseClicked(MouseEvent e) {}</em></p>
<p><em>    public void mouseEntered(MouseEvent e) {}</em></p>
<p><em>    public void mouseExited(MouseEvent e) {}</em></p>
<p><em>    public void mouseReleased(MouseEvent e) {}</em></p>
<p><em>    public void getPointInput() {</em><br><em>        miAcceptingInput = POINT_OBJECT;</em><br><em>        mCurrentObject = (Object)new Point();</em><br><em>        mGeomApplet.getTextArea().append("New point object: enter point.\n");</em><br><em>    }</em></p>
<p><em>    public void getLineInput() {</em><br><em>        miAcceptingInput = LINE_OBJECT;</em><br><em>        mCurrentObject = (Object)new Line();</em><br><em>        mGeomApplet.getTextArea().append("New line: enter end points.\n");</em><br><em>    }</em></p>
<p><em>    public void getPolygonInput() {</em><br><em>        miAcceptingInput = POLYGON_OBJECT;</em><br><em>        mCurrentObject = (Object)new Polygon();</em><br><em>        mGeomApplet.getTextArea().append("New polygon: enter vertices ");</em><br><em>        mGeomApplet.getTextArea().append("(click right button to finish).\n");</em><br><em>    }</em></p>
<p><em>    void addPointToObject(int iX, int iY) {</em><br><em>        String str;</em></p>
<p><em>        miPointsEntered++;</em><br><em>        switch (miAcceptingInput) {</em><br><em>        case POINT_OBJECT:</em><br><em>            str = "Point at (" + iX + "," + iY + ")\n";</em><br><em>            mGeomApplet.getTextArea().append(str);</em><br><em>            Point point = (Point)mCurrentObject;</em><br><em>            point.x = iX;</em><br><em>            point.y = iY;</em><br><em>            mPointList.addElement(mCurrentObject);</em><br><em>            str = "Finished creating point object.\n";</em><br><em>            mGeomApplet.getTextArea().append(str);</em><br><em>            mGeomApplet.repaint();</em><br><em>            miAcceptingInput = NO_OBJECT;</em><br><em>            miPointsEntered = 0;</em><br><em>            mCurrentObject = null;</em><br><em>            break;</em></p>
<p><em>        case LINE_OBJECT:</em><br><em>            if (miPointsEntered &lt;= 2) {</em><br><em>                str = "End " + miPointsEntered + " at (" + iX + "," + iY + ")";</em><br><em>                str += "\n";</em><br><em>                mGeomApplet.getTextArea().append(str);</em><br><em>            }</em><br><em>            Line line = (Line)mCurrentObject;</em><br><em>            if (miPointsEntered == 1) {</em><br><em>                line.setEnd1(iX, iY);</em><br><em>                mGeomApplet.repaint();</em><br><em>            }</em><br><em>            else {</em><br><em>                if (miPointsEntered == 2) {</em><br><em>                    line.setEnd2(iX, iY);</em><br><em>                    mLineList.addElement(mCurrentObject);</em><br><em>                    str = "Finished creating line object.\n";</em><br><em>                    mGeomApplet.getTextArea().append(str);</em><br><em>                    mGeomApplet.repaint();</em><br><em>                }</em><br><em>                miAcceptingInput = NO_OBJECT;</em><br><em>                miPointsEntered = 0;</em><br><em>                mCurrentObject = null;</em><br><em>            }</em><br><em>            break;</em></p>
<p><em>        case POLYGON_OBJECT:</em><br><em>            str = "Vertex " + miPointsEntered + " at (" + iX + "," + iY + ")";</em><br><em>            str += "\n";</em><br><em>            mGeomApplet.getTextArea().append(str);</em><br><em>            Polygon polygon = (Polygon)mCurrentObject;</em><br><em>            polygon.addPoint(iX, iY);</em><br><em>            mGeomApplet.repaint();</em><br><em>            break;</em></p>
<p><em>        default:</em><br><em>            break;</em><br><em>        }                           // End switch.</em><br><em>    }</em><br><em>}</em><br>
 </p>
<p><em>// Action listener to create a new Point object.</em><br><em>class PointActionListener implements ActionListener {</em><br><em>    DrawingArea mDrawingArea;</em></p>
<p><em>    PointActionListener(DrawingArea drawingArea) {</em><br><em>        mDrawingArea = drawingArea;</em><br><em>    }</em></p>
<p><em>    public void actionPerformed(ActionEvent e) {</em><br><em>        mDrawingArea.getPointInput();</em><br><em>    }</em><br><em>}</em><br>
 </p>
<p><em>// Action listener to create a new Line object.</em><br><em>class LineActionListener implements ActionListener {</em><br><em>    DrawingArea mDrawingArea;</em></p>
<p><em>    LineActionListener(DrawingArea drawingArea) {</em><br><em>        mDrawingArea = drawingArea;</em><br><em>    }</em></p>
<p><em>    public void actionPerformed(ActionEvent e) {</em><br><em>        mDrawingArea.getLineInput();</em><br><em>    }</em><br><em>}</em><br>
 </p>
<p><em>// Action listener to create a new Polygon object.</em><br><em>class PolygonActionListener implements ActionListener {</em><br><em>    DrawingArea mDrawingArea;</em></p>
<p><em>    PolygonActionListener(DrawingArea drawingArea) {</em><br><em>        mDrawingArea = drawingArea;</em><br><em>    }</em></p>
<p><em>    public void actionPerformed(ActionEvent e) {</em><br><em>        mDrawingArea.getPolygonInput();</em><br><em>    }</em><br><em>}</em><br>
 </p>
<p><em>// A line class.</em><br><em>class Line {</em><br><em>    Point mEnd1, mEnd2;</em><br><em>    boolean mb1, mb2;</em></p>
<p><em>    Line() {</em><br><em>        mb1 = mb2 = false;</em><br><em>        mEnd1 = new Point();</em><br><em>        mEnd2 = new Point();</em><br><em>    }</em></p>
<p><em>    void setEnd1(int iX, int iY) {</em><br><em>        mEnd1.x = iX;</em><br><em>        mEnd1.y = iY;</em><br><em>        mb1 = true;</em><br><em>    }</em></p>
<p><em>    void setEnd2(int iX, int iY) {</em><br><em>        mEnd2.x = iX;</em><br><em>        mEnd2.y = iY;</em><br><em>        mb2 = true;</em><br><em>    }</em></p>
<p><em>    void draw(Graphics g) {</em><br><em>        g.fillRect(mEnd1.x-1, mEnd1.y-1, 3, 3);</em><br><em>        g.fillRect(mEnd2.x-1, mEnd2.y-1, 3, 3);</em><br><em>        g.setColor(Color.green);</em><br><em>        g.drawLine(mEnd1.x, mEnd1.y, mEnd2.x, mEnd2.y);</em><br><em>        g.setColor(Color.black);</em><br><em>    }</em><br><em>}</em>  </p>
	                    

	        			
	                    
	                    
	                    	
	                    

            		 </main><!--Course_inner_section tag close --><div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->             
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom"><div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index-->
<div id="footer">
<nav aria-label="Footer"><nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses"><span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-footer&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
</ul></nav><div id="foot-c2" class="grid_2">
<nav aria-labelledby="f-about"><span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
    <li><a href="https://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li>
</ul></nav><!--about--><nav aria-labelledby="f-tools"><span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>
    <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul></nav><!--tools-->
</div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate"><span id="f-donate" class="footer" aria-hidden="true">Donate</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/donate">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
    <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul></nav><div class="grid_2" id="foot-c4"><nav aria-labelledby="f-featured-sites"><span id="f-featured-sites" class="footer" aria-hidden="true">Featured Sites</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=featured-sites">OCW Educator</a></li>
    <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
    <li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT+K12 Videos">MIT+K12 Videos</a></li>
    <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
    <li><a href="https://outreach.mit.edu/" aria-label="External Link: Outreach at MIT">Outreach@MIT</a></li>
    <li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
</ul></nav></div>
</nav><!--Footer Nav>--><aside id="foot-c5" class="grid_4 omega" aria-labelledby="f-our-corporate-supporters" style="min-height: 289px;"><span id="f-our-corporate-supporters" class="footer" aria-hidden="true">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside><aside class="grid_12 alpha omega" aria-label="OCW 15th Anniversary" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px; font-weight: bold;"><span style="text-transform: uppercase;">MIT OpenCourseWare's</span> 15th anniversary</span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro" src="../../../common/images/logo_sapient.png"></a></p>
</aside><aside class="grid_12 alpha omega" aria-labelledby="f-about-ocw" itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;"><span id="f-about-ocw" class="footer" aria-hidden="true">             About <span itemprop="name">MIT OpenCourseWare</span></span>
<p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">OCW is a free and open publication of material from thousands of MIT courses, covering the entire MIT curriculum. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu">               <img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology" src="../../../common/images/logo_mit.png"></a>             <a href="http://odl.mit.edu">               <img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning" src="https://ocw.mit.edu/images/logo_odl.png"></a>             <a href="http://www.oeconsortium.org/">               <img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium" src="https://ocw.mit.edu/images/logo_oec.png"></a>             <a itemprop="useRightsUrl" rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">               <img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons" src="../../../common/images/cc_by-nc-sa.png"></a>
</div>
<div id="f-legal" class="grid_12 alpha omega" style="border-top: none;">
<p class="copyright">© 2001–2015<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</aside>
</div>
<!--footer-->   <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->
</body>
</html>
