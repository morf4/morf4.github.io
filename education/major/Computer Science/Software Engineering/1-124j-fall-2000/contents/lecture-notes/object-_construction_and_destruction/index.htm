<!DOCTYPE html><html lang="en">
<head>
<meta charset="utf-8">
<meta name="format-detection" content="telephone=no">
<title>Object Construction and Destruction | Lecture Notes | Foundations of Software Engineering | Civil and Environmental Engineering | MIT OpenCourseWare</title>
<!-- Begin Automatic Metadata Insertion --><meta content="1-124j-foundations-of-software-engineering-fall-2000" name="WT.cg_n">
<meta content="Object Construction and Destruction" name="WT.cg_s">
<meta content="" name="Description">
<meta content="Amaratunga, Kevin" name="Author">
<meta content="modern software development,engineering and information technology,component-based software,C#,.NET,data structures,algorithms for modeling,analysis,visualization,basic problem-solving techniques,web services,management and maintenance of software,sorting,searching,algorithms,numerical simulation techniques,image processing,computational geometry,finite element methods,network methods,e-business applications,classes,objects,inheritance,virtual functions,abstract classes,polymorphism,Java applications,applets,Abstract Windowing Toolkit,Graphics,Threads,Java,C++,information technology,engineering,modeling algorithms,basic problem-solving,software management,software maintenance,searching algorithms,numerical simulation,object oriented programming,1.124J,2.159J,13.470J,1.124,2.159,13.470,Software Design and Engineering" name="keywords">
<meta content="1.124J Foundations of Software Engineering | Object Construction and Destruction" name="Search_Display">
<meta content="Software Design and Engineering" itemprop="about">
<!-- End Automatic Metadata Insertion --><link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/grid.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/base.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/menu.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/jquery.bubblepopup.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses.css">
<link title="default" rel="stylesheet" type="text/css" href="../../../common/styles/courses_new.css">
<link href="https://ocw.mit.edu/xml/ocwcc.rdf" type="application/rdf+xml" rel="metadata">
<link rel="canonical" href="https://ocw.mit.edu/courses/civil-and-environmental-engineering/1-124j-foundations-of-software-engineering-fall-2000/lecture-notes/object-_construction_and_destruction">
<link rel="apple-touch-icon" href="../../../common/images/apple-touch-icon.png">
<script type="text/javascript" src="../../../common/scripts/jquery.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-media-utils-offline.js"></script><script type="text/javascript" src="../../../common/scripts/ocw-offline.js"></script><script type="text/javascript" src="../../../common/scripts/jquery.bubblepopup.min.js"></script><script type="text/javascript" src="../../../common/scripts/expandy.js"></script><script type="text/javascript" src="../../../common/scripts/bubble-popup-offline.js"></script>
</head>
<body itemscope itemtype="http://schema.org/WebPage">
        
	

        <header id="top"><div id="grid">
				
				
					
<div id="portletwrapper-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572" class="portletWrapper kssattr-portlethash-6f63772e746f70706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d686561646572">
<div class="portletStaticText portlet-static-site-header">
<!--googleoff: index-->
<div class="grid_6 alpha" id="banner"><a href="https://ocw.mit.edu/"><img src="../../../common/images/ocw_mast.png" class="logo" alt="MIT OpenCourseWare, Massachusetts Institute of Technology"></a></div>
<div class="grid_6 omega" id="subscribe">
<aside class="module" aria-label="Connect with OCW"><table class="social"><tbody><tr>
<td class="socialbutton"><a aria-label="Subscribe to the OCW Newsletter" href="https://ocw.mit.edu/subscribe/index.htm?utm_source=header"><img src="../../../common/images/trans.gif" alt="An icon depicting an envelope.">Subscribe to the OCW Newsletter</a></td>
            <td>
<a aria-label="Google+" href="https://plus.google.com/104567381989352550847/posts"><img src="../../../common/images/icon_gp.png" alt="Click to visit our Google+ page."></a>                   <a aria-label="Pinterest" href="https://www.pinterest.com/mitocw/pins/"><img src="../../../common/images/icon_pin.png" alt="Click to visit our Pinterest page."></a>                   <a aria-label="Facebook" href="https://facebook.com/mitocw"><img src="../../../common/images/icon_fb.png" alt="Click to visit our Facebook page."></a>                   <a aria-label="Twitter" href="https://twitter.com/mitocw"><img src="../../../common/images/icon_tw.png" alt="Click to visit our Twitter feed."></a>
</td>
        </tr></tbody></table></aside><nav aria-label="Help Links" class="helplinks"><a aria-label="OCW Site Help" href="https://ocw.mit.edu/help">Help</a><span aria-hidden="true">|</span>     <a href="../../../common/jsp/feedback.htm">Contact Us</a>   </nav>
</div>
<div class="clear"> </div>
<!--googleon: index-->
</div>

</div>





<!--googleoff: index-->
<nav id="mega" class="grid_8 alpha" aria-label="Site"><ul id="menu" role="presentation">
<li id="menu_home">
        <a href="https://ocw.mit.edu/" aria-label="Homepage"><img src="../../../common/images/top-nav_home.png" class="home_icon" alt="Click for site home page."></a><!-- Begin Home Item -->
    </li>
<!-- End Home Item -->
    <li id="drop_1" aria-label="Find Courses" class="selected">
      <a href="#" aria-hidden="true">Find Courses</a><!-- Begin 5 columns Item -->
      <div class="dropdown_5columns-a mega-courses">
        <div class="col_1a">
          <div class="row_1a">
            <nav aria-labelledby="mm-find-courses-by"><span id="mm-find-courses-by" class="nav" aria-hidden="true">Find courses by:</span>
              <ul class="find_by" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Topic</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-number/">MIT Course Number</a></li>
                <li><a href="https://ocw.mit.edu/courses/find-by-department/">Department</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
								<li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
            		<li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-megamenu&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
							</ul></nav><nav aria-labelledby="mm-collections"><span id="mm-collections" class="nav" aria-hidden="true">Collections</span>
              <ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Lectures</a></li>
                <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
                <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
                <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
                <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
              </ul></nav><nav class="col_1b" aria-labelledby="mm-translated-courses"><span id="mm-translated-courses" class="nav" aria-hidden="true">Translated Courses</span>
							<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/translated-courses/traditional-chinese" aria-label="Traditional Chinese">繁體字 / Traditional Chinese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/spanish" aria-label="Spanish">Español / Spanish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/portuguese" aria-label="Portuguese">Português / Portuguese</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/persian" aria-label="Persian">فارسی / Persian</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/turkish" aria-label="Turkish">Türkçe / Turkish</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses/korean" aria-label="Korean">(비디오)한국 / Korean</a></li>
								<li><a href="https://ocw.mit.edu/courses/translated-courses">More...</a></li>
							</ul></nav>
</div>
          <div class="row_1b">
            <nav aria-labelledby="mm-cross-disciplinary-topic-lists"><span id="mm-cross-disciplinary-topic-lists" class="nav" aria-hidden="true">Cross-Disciplinary Topic Lists</span>
            	<ul role="presentation">
<li><a href="https://ocw.mit.edu/courses/energy-courses">Energy</a></li>
                <li><a href="https://ocw.mit.edu/courses/entrepreneurship">Entrepreneurship</a></li>
                <li><a href="https://ocw.mit.edu/courses/environment-courses">Environment</a></li>
              	<li><a href="https://ocw.mit.edu/courses/intro-programming">Introductory Programming</a></li>
                <li><a href="https://ocw.mit.edu/courses/life-sciences">Life Sciences</a></li>
                <li><a href="https://ocw.mit.edu/courses/transportation-courses">Transportation</a></li>
              </ul></nav>
</div>
        </div>

      </div>
    </li>
    <li id="drop_2">
        <a href="" aria-hidden="true">About</a>
        <div class="dropdown_1column-a">
            <nav class="col_1" aria-label="About"><ul role="presentation">
<li><a href="https://ocw.mit.edu/about/">About MIT OpenCourseWare</a></li>
                    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
                    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
                    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
                </ul></nav>
</div>
    </li>
    <li id="drop_3">
        <a href="" aria-hidden="true">Donate</a>
        <div class="dropdown_1column-a">
          <nav class="col_1" aria-label="Donate"><ul role="presentation">
<li><a href="https://ocw.mit.edu/donate/">Make a Donation</a></li>
              <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
              <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
              <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
              <li><a href="https://ocw.mit.edu/donate/shop-ocw">Shop OCW</a></li>
              <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
            </ul></nav>
</div>
    </li>
    <li id="drop_4">
      <a href="" aria-hidden="true">Featured Sites</a>
      <div class="dropdown_1column-a">
        <nav class="col_1" aria-labelledby="mm-featured-sites"><span id="mm-featured-sites" class="nav" aria-hidden="true">OCW Initiatives</span>
          <ul role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
            <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=megamenu&amp;utm_medium=featured-sites">OCW Educator</a></li>
            <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
            <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
					</ul></nav><nav class="col_1" aria-labelledby="mm-featured-external-links"><span id="mm-featured-external-links" class="nav" aria-hidden="true">Beyond OCW</span>
					<ul>
<li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT Plus K12 Videos">MIT+K12 Videos</a></li>
            <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
						<li><a href="https://outreach.mit.edu" aria-label="External Link: Outreach at MIT">Outreach @ MIT</a></li>
						<li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
          </ul></nav>
</div>
    </li>
  </ul></nav><div id="search" role="search" class="grid_4 omega">
  
    <form aria-label="Advanced Search" method="get" action="../../../common/search/AdvancedSearch.htm">
		  <table class="search"><tbody><tr>
<td class="black"><input type="text" onblur="fillSearchBox()" onfocus="clearSearchBox()" maxlength="255" value="Search" name="q" class="greytext searchField" id="terms"></td>
            <td class="black"><input type="image" src="../../../common/images/button_search.png" name="btnG" class="sub_button"></td>
            <td class="text2"><a href="../../../common/search/AdvancedSearch.htm">Advanced<br>Search</a></td>
          </tr></tbody></table>
</form>
</div>
<div class="clear"></div>
<!--googleon: index-->
<!-- *end header* -->

				
				
			</div>
<!-- top grid end -->
		</header><!-- top end --><div id="center">
         <div id="grid">
		         <div id="left-section">
                 <nav aria-label="Breadcrumb" id="breadcrumb"><p>

    <a href="https://ocw.mit.edu/">Home</a>
    
        »
        
    
    
        
            <a href="https://ocw.mit.edu/courses">Courses</a>
            
                »
                
            
            
         
    
    
        
            <a href="https://ocw.mit.edu/courses/civil-and-environmental-engineering">Civil and Environmental Engineering</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/index.htm">Foundations of Software Engineering</a>
            
                »
                
            
            
         
    
    
        
            <a href="../../../contents/lecture-notes/index.htm">Lecture Notes</a>
            
                »
                
            
            
         
    
    
        
            
            
            Object Construction and Destruction
         
    
</p>

                 </nav><div class="clear"></div>
                   <div id="section_title">
           			     <h1 class="title" itemprop="name" property="dct:title">
        <span class="" id="parent-fieldname-title">
            Object Construction and Destruction
        </span>
    </h1>
             	     </div>
             	     <div class="clear"></div>
             	     <div id="course_wrapper_section">
           	     	 <nav id="course_nav" aria-label="Course"><script language="javascript" type="text/javascript">
function toggleMenu(objID) {
  if (!document.getElementById) return;
  var ob = document.getElementById(objID);
  ob.className = (ob.className == 'selected')?'': 'selected';
}
function toggleClass(id)
{
  var divtoggleClass= document.getElementById(id);
  divtoggleClass.className = (divtoggleClass.className == 'mO')?'mC': 'mO';
  return false;
}
function changeAlt(id)
{
  id.alt = (id.alt == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
  id.title = (id.title == 'Expand Menu')?'Collapse Menu' : 'Expand Menu';
}
</script><!--Left Nav Starts --><ul>
<li class="">
			   			<a href="../../../contents/index.htm">
		                  Course Home  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/syllabus/index.htm">
		                  Syllabus  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/calendar/index.htm">
		                  Calendar  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="selected">
			   			<a href="../../../contents/lecture-notes/index.htm">
		                  Lecture Notes  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/recitations/index.htm">
		                  Recitations  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/assignments/index.htm">
		                  Assignments  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/exams/index.htm">
		                  Exams  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    <li class="">
			   			<a href="../../../contents/projects/index.htm">
		                  Projects  			                
	                    </a>
		        </li>
		    
         	
	
	
	    	
	    	    
		    
         	
	<!--second tal block close-->  
	
</ul>
<!--Left Nav Ends --></nav><main id="course_inner_section" aria-labelledby="section_title"><h2 class="subhead">Contents </h2>
<ol>
<li><a href="#1">Local and Global Variables</a></li>
<li><a href="#2">Reference Types</a></li>
<li>
<a href="#3">Functions in C++</a> </li>
<li><a href="#4">Basic Input and Output</a></li>
<li><a href="#5">Creating and Destroying Objects - Constructors and Destructors</a></li>
</ol>
<h2 class="subhead">
<a id="1" name="1"></a>1. Local and Global Variables</h2>
<p>(<em>Ref. Lippman 8.1-8.3</em>)</p>
<p>Local variables are objects that are only accessible within a single function (or a sub-block within a function.) Global variables, on the other hand, are objects that are generally accessible to every function in a program. It is possible, though potentially confusing, for a local object and a global object to share the same name. In following example, the local object <em>x</em> shadows the object <em>x</em> in the global namespace. We must therefore use the <em>global scope operator</em>, <em>::</em>, to access the global object.</p>
<p><em><strong>main_file.C</strong></em></p>
<p><em>float x;            // A global object.</em></p>
<p><em>int main () {</em><br><em>    float x;        // A local object with the same name.</em></p>
<p><em>    x = 5.0;       // This refers to the local object.</em><br><em>    ::x = 7.0;     // This refers to the global object.</em><br>
}<br>
 </p>
<p>What happens if we need to access the global object in another file? The object has already been defined in <em>main_file.C</em>, so we should not set aside new memory for it. We can inform the compiler of the existence of the global object using the <em>extern</em> keyword.</p>
<p><em><strong>another_file.C</strong></em></p>
<p><em>extern float x;   // Declares the existence of a global object external to this file.</em></p>
<p><em>void do_something() {</em><br><em>    x = 3;          // Refers to the global object defined in main_file.C.</em><br><em>}</em><br>
 </p>
<h2 class="subhead">
<a id="2" name="2"></a>2. Reference Types</h2>
<p><em>(Ref. Lippman 3.6)</em></p>
<p>Reference types are a convenient alternative way to use the functionality that pointers provide. A reference is just a nickname for existing storage. The following example defines an integer object, <em>i</em>, and then it defines a reference variable, <em>r</em>, by the statement</p>
<p><em>int&amp; r = i;</em></p>
<p>Be careful not to confuse this use of <em>&amp;</em> with the <em>address of</em> operator. Also note that, unlike a pointer, a reference must be initialized at the time it is defined.</p>
<p><em>#include &lt;stdio.h&gt;</em></p>
<p><em>int main() {</em><br><em>    int i = 0;</em><br><em>    int&amp; r = i;    // Create a reference to i.</em></p>
<p><em>    i++;</em><br><em>    printf("r = %d\n", r);</em><br><em>}</em><br>
 </p>
<h2 class="subhead">
<a id="3" name="3"></a>3. Functions in C++</h2>
<p><strong>Argument Passing</strong></p>
<p><em>(Ref. Lippman 7.3)</em></p>
<p>Arguments can be passed to functions in two ways. These techniques are known as</p>
<p>Pass by value.</p>
<p>Pass by reference.</p>
<p>When an argument is passed by value, the function gets its own local copy of the object that was passed in. On the other hand, when an argument is passed by reference, the function simply refers to the object in the calling program.</p>
<p><em>// Pass by value.</em><br><em>void increment (int i) {</em><br><em>    i++;                               // Modifies a local variable.</em><br><em>}</em></p>
<p><em>// Pass by reference.</em><br><em>void decrement (int&amp; i) {</em><br><em>    i--;                               // Modifies storage in the calling function.</em><br><em>}</em></p>
<p><em>#include &lt;stdio.h&gt;</em></p>
<p><em>int main () {</em><br><em>    int k = 0;</em></p>
<p><em>    increment(k);                   // This has no effect on k.</em><br><em>    decrement(k);                   // This will modify k.</em><br><em>    printf("%d\n", k);</em><br><em>}</em><br>
 </p>
<p>Passing a large object by reference can improve efficiency since it avoids the overhead of creating an extra copy. However, it is important to understand the potentially undesirable side effects that can occur. If we want to protect against modifying objects in the calling program, we can pass the argument as a constant reference:</p>
<p><em>// Pass by reference.</em><br><em>void decrement (const int&amp; i) {</em><br><em>     i--;                               // This statement is now illegal.</em><br><em>}</em><br>
 </p>
<h2 class="subhead">Return by Reference</h2>
<p><em>(Ref. Lippman 7.4)</em></p>
<p>A function may return a reference to an object, as long as the object is not local to the function. We may decide to return an object by reference for efficiency reasons (to avoid creating an extra copy). Returning by reference also allows us to have function calls that appear on the left hand side of an assignment statement. In the following contrived example, <em>select_month()</em> is used to pick out the <em>month</em> member of the object <em>today</em> and set its value to <em>9</em>.</p>
<p>s<em>truct date {</em><br><em>    int day;</em><br><em>    int month;</em><br><em>    int year;</em><br><em>};</em></p>
<p><em>int&amp; select_month(struct date &amp;d) {</em><br><em>    return d.month;</em><br><em>}</em></p>
<p><em>#include &lt;stdio.h&gt;</em></p>
<p><em>int main() {</em><br><em>    struct date today;</em></p>
<p><em>    select_month(today) = 9;                       // This is equivalent to: today.month = 9;</em><br><em>    printf("%d\n", today.month);</em><br><em>}</em><br>
 </p>
<h2 class="subhead">Default Arguments</h2>
<p><em>(Ref. Lippman 7.3.5)</em></p>
<p>C++ allows us to specify default values for function arguments. Arguments with default values must all appear at the end of the argument list. In the following example, the third argument of <em>move()</em> has a default value of zero.</p>
<p><em>void move(int dx, int dy, int dz = 0) {</em><br><em>    // Move some object in 3D space.  If dz = 0, then move the object in 2D space.</em><br><em>}</em></p>
<p><em>int main() {</em><br><em>   move(2, 3, 5);</em><br><em>   move(2, 3);       // dz assumes the default value, 0.</em><br><em>}</em><br>
 </p>
<h2 class="subhead">Function Overloading</h2>
<p><em>(Ref. Lippman 9.1)</em></p>
<p>In C++, two functions can share the same name as long as their <em>signatures</em> are different. The signature of a function is another name for its parameter list. Function overloading is useful when two or more functionally similar tasks need to be implemented in different ways. For example:</p>
<p><em>void draw(double center, double radius) {</em><br><em>    // Draw a circle.</em><br><em>}</em></p>
<p><em>void draw(int left, int top, int right, int bottom) {</em><br><em>    // Draw a rectangle.</em><br><em>}</em></p>
<p><em>int main() {</em><br><em>    draw(0, 5);                  // This will draw a circle.</em><br><em>    draw(0, 4, 6, 8);           // This will draw a rectangle.</em><br><em>}</em><br>
 </p>
<h2 class="subhead">Inline Functions
</h2>
<p><em>(Ref. Lippman 3.15, 7.6)</em></p>
<p>Every function call involves some overhead. If a small function has to be called a large number of times, the relative overhead can be high. In such instances, it makes sense to ask the compiler to expand the function inline. In the following example, we have used the <em>inline</em> keyword to make <em>swap()</em> an inline function.<br>
 </p>
<p><em>inline void swap(int&amp; a, int&amp; b) {</em><br><em>     int tmp = a;</em><br><em>     a = b;</em><br><em>     b = tmp;</em><br><em>}</em></p>
<p><em>#include &lt;stdio.h&gt;</em></p>
<p><em>main() {</em><br><em>    int i = 2, j = 3;</em></p>
<p><em>    swap(i, j);</em><br><em>    printf("i = %d j = %d\n", i, j);</em><br><em>}</em><br>
 </p>
<p>This code will be expanded as</p>
<p><em>main() {</em><br><em>    int i = 2, j = 3;</em></p>
<p><em>    int tmp = i;</em><br><em>     i = j;</em><br><em>     j = tmp;</em><br><em>    printf("i = %d j = %d\n", i, j);</em><br><em>}</em></p>
<p>Whenever the compiler needs to expand a call to an <em>inline</em> function, it needs to know the function definition. For this reason, <em>inline</em> functions are usually placed in a header file that can be included where necessary. Note that the <em>inline</em> specification is only a recommendation to the compiler, which the compiler may choose to ignore. For example, a recursive function cannot be completely expanded inline.<br>
 </p>
<h2 class="subhead">
<a id="4" name="4"></a>4. Basic Input and Output</h2>
<p><em>(Ref. Lippman 1.5)</em></p>
<p>C++ provides three <em>predefined</em> objects for basic input and output operations: <em>cin</em>, <em>cout</em> and <em>cerr</em>. All three objects can be accessed by including the header file <em>iostream.h</em>.<br>
 </p>
<h2 class="subhead">Reading from Standard Input: cin</h2>
<p><em>cin</em> is an object of type <em>istream</em> that allows us to read in a stream of data from <em>standard input</em>. It is functionally equivalent to the <em>scanf()</em> function in C. The following example shows how <em>cin</em> is used in conjunction with the <em>&gt;&gt;</em> operator. Note that the <em>&gt;&gt;</em> points <em>towards</em> the object into which we are reading data.<br>
 </p>
<p><em>#include &lt;iostream.h&gt;                // Provides access to cin and cout.</em><br><em>#include &lt;stdio.h&gt;                     /* Provides access to printf and scanf. */</em></p>
<p><em>int main() {</em><br><em>    int i;</em></p>
<p><em>    cin &gt;&gt; i;                                  // Uses the stream input object, cin, to read data into i.</em><br><em>    scanf("%d", &amp;i);                      /* Equivalent C-style statement. */</em></p>
<p><em>    float a;</em><br><em>    cin &gt;&gt; i &gt;&gt; a;                          // Reads multiple values from standard input.</em><br><em>    scanf("%d%f", &amp;i, &amp;a);           /* Equivalent C-style statement. */</em><br><em>}</em><br>
 </p>
<h2 class="subhead">Writing to Standard Output: <em>cout</em>
</h2>
<p><em>cout</em> is an object of type <em>ostream</em> that allows us to write out a stream of data to <em>standard output</em>. It is functionally equivalent to the <em>printf()</em> function in C. The following example shows how <em>cout</em> is used in conjunction with the <em>&lt;&lt;</em> operator. Note that the <em>&lt;&lt;</em> points <em>away</em> from the object from which we are writing out data.<br>
 </p>
<p><em>#include &lt;iostream.h&gt;                // Provides access to cin and cout.</em><br><em>#include &lt;stdio.h&gt;                     /* Provides access to printf and scanf. */</em></p>
<p><em>int main() {</em><br><em>    cout &lt;&lt; "Hello World!\n";       // Uses the stream output object, cout, to print out a string.</em><br><em>    printf("Hello World!\n");          /* Equivalent C-style statement. */</em></p>
<p><em>    int i = 7;</em><br><em>    cout &lt;&lt; "i = " &lt;&lt; i &lt;&lt; endl;     // Sends multiple objects to standard output.</em><br><em>    printf("i = %d\n", i);                 /* Equivalent C-style statement. */</em><br><em>}</em><br>
 </p>
<h2 class="subhead">Writing to Standard Error: <em>cerr</em>
</h2>
<p><em>cerr</em> is also an object of type <em>ostream</em>. It is provided for the purpose of writing out warning and error messages to <em>standard error</em>. The usage of <em>cerr</em> is identical to that of <em>cout</em>. Why then should we bother with <em>cerr</em>? The reason is that it makes it easier to filter out warning and error messages from real data. For example, suppose that we compile the following program into an executable named <em>foo</em>:</p>
<p><em>#include &lt;iostream.h&gt;</em></p>
<p><em>int main() {</em><br><em>    int i = 7;</em><br><em>    cout &lt;&lt; i &lt;&lt; endl;                                   // This is real data.</em><br><em>    cerr &lt;&lt; "A warning message" &lt;&lt; endl;    // This is a warning.</em><br><em>}</em></p>
<p>We could separate the data from the warning by redirecting the standard output to a file, while allowing the standard error to be printed on our console.</p>
<p><em>athena% foo &gt; temp</em><br><em>A warning message</em></p>
<p><em>athena% cat temp</em><br><em>7</em><br>
 </p>
<h2 class="subhead">
<a id="5" name="5"></a>5. Creating and Destroying Objects - Constructors  and Destructors</h2>
<p><em>(Ref. Lippman 14.1-14.3)</em></p>
<p>Let's take a closer look at how constructors and destructors work.</p>
<p><strong>A Point Class</strong></p>
<p>Here is a complete example of a <em>Point</em> class. We have organized the code into three separate files:</p>
<p><em>point.h</em> contains the <em>declaration</em> of the class, which describes the structure of a <em>Point</em> object.</p>
<p><em>point.C</em> contains the <em>definition</em> of the class i.e. the actual implementation of the methods.</p>
<p><em>point_test.C</em> is a program that uses the <em>Point</em> class.</p>
<p>Our <em>Point</em> class has three constructors and one destructor.</p>
<p><em>    Point();                               // The default constructor.</em><br><em>    Point(float fX, float fY);       // A constructor that takes two floats.</em><br><em>    Point(const Point&amp; p);         // The copy constructor.</em><br><em>    ~Point();                             // The destructor.</em></p>
<p>These constructors can be respectively invoked by object definitions such as</p>
<p><em>    Point a;</em><br><em>    Point b(1.0, 2.0);</em><br><em>    Point c(b);</em></p>
<p>The default constructor, <em>Point()</em>, is so named because it can be invoked without any arguments. In our example, the default constructor initializes the <em>Point</em> to (0,0). The second constructor creates a <em>Point</em> from a pair of coordinates of type <em>float</em>. Note that we could combine these two constructors into a single constructor which has default arguments:</p>
<p><em>    Point(float fX=0.0, float fY=0.0);</em></p>
<p>The third constructor is known as a copy constructor since it creates one <em>Point</em> from another. The object that we want to clone is passed in as a constant reference. Note that we cannot pass by value in this instance because doing so would lead to an unterminated recursive call to the copy constructor. In this example, the destructor does not have to perform any clean-up operations. Later on, we will see examples where the destructor has to release dynamically allocated memory.</p>
<p>Constructors and destructors can be triggered more often than you may imagine. For example, each time a <em>Point</em> is passed to a function by value, a local copy of the object is created. Likewise, each time a <em>Point</em> is returned by value, a temporary copy of the object is created in the calling program. In both cases, we will see an extra call to the copy constructor, and an extra call to the destructor. You are encouraged to put print statements in every constructor and in the destructor, and then carefully observe what happens.<br>
 </p>
<p><em><strong>point.h</strong></em></p>
<p><em>// Declaration of class Point.</em></p>
<p><em>#ifndef _POINT_H_</em><br><em>#define _POINT_H_</em></p>
<p><em>#include &lt;iostream.h&gt;</em></p>
<p><em>class Point {</em><br><em>    // The state of a Point object. Property variables are typically</em><br><em>    // set up as private data members, which are read from and</em><br><em>    // written to via public access methods.</em><br><em>        private:</em><br><em>    float mfX;</em><br><em>    float mfY;</em></p>
<p><em>    // The behavior of a Point object.</em><br><em>        public:</em><br><em>    Point();                               // The default constructor.</em><br><em>    Point(float fX, float fY);       // A constructor that takes two floats.</em><br><em>    Point(const Point&amp; p);         // The copy constructor.</em><br><em>    ~Point();                             // The destructor.</em><br><em>    void print() {                       // This function will be made inline by default.</em><br><em>        cout &lt;&lt; "(" &lt;&lt; mfX &lt;&lt; "," &lt;&lt; mfY &lt;&lt; ")" &lt;&lt; endl;</em><br><em>    }</em><br><em>    void set_x(float fX);</em><br><em>    float get_x();</em><br><em>    void set_y(float fX);</em><br><em>    float get_y();</em><br><em>};</em></p>
<p><em>#endif // _POINT_H_</em><br><em> </em></p>
<p><em><strong>point.C</strong></em></p>
<p><em>// Definition class Point.</em></p>
<p><em>#include "point.h"</em></p>
<p><em>// A constructor which creates a Point object at (0,0).</em><br><em>Point::Point() {</em><br><em>    cout &lt;&lt; "In constructor Point::Point()" &lt;&lt; endl;</em><br><em>    mfX = 0.0;</em><br><em>    mfY = 0.0;</em><br><em>}</em></p>
<p><em>// A constructor which creates a Point object from two</em><br><em>// floats.</em><br><em>Point::Point(float fX, float fY) {</em><br><em>    cout &lt;&lt; "In constructor Point::Point(float fX, float fY)" &lt;&lt; endl;</em><br><em>    mfX = fX;</em><br><em>    mfY = fY;</em><br><em>}</em></p>
<p><em>// A constructor which creates a Point object from</em><br><em>// another Point object.</em><br><em>Point::Point(const Point&amp; p) {</em><br><em>    cout &lt;&lt; "In constructor Point::Point(const Point&amp; p)" &lt;&lt; endl;</em><br><em>    mfX = p.mfX;</em><br><em>    mfY = p.mfY;</em><br><em>}</em></p>
<p><em>// The destructor.</em><br><em>Point::~Point() {</em><br><em>   cout &lt;&lt; "In destructor Point::~Point()" &lt;&lt; endl;</em><br><em>}</em></p>
<p><em>// Modifier for x coordinate.</em><br><em>void Point::set_x(float fX) {</em><br><em>    mfX = fX;</em><br><em>}</em></p>
<p><em>// Accessor for x coordinate.</em><br><em>float Point::get_x() {</em><br><em>    return mfX;</em><br><em>}</em></p>
<p><em>// Modifier for y coordinate.</em><br><em>void Point::set_y(float fY) {</em><br><em>    mfY = fY;</em><br><em>}</em></p>
<p><em>// Accessor for y coordinate.</em><br><em>float Point::get_y() {</em><br><em>    return mfY;</em><br><em>}</em><br><em> </em></p>
<p><em><strong>point_test.C</strong></em></p>
<p><em>// Test program for the Point class.</em></p>
<p><em>#include "point.h"</em></p>
<p><em>void main() {</em><br><em>    Point a;</em><br><em>    Point b(1.0, 2.0);</em><br><em>    Point c(b);</em></p>
<p><em>    // Print out the current state of all objects.</em><br><em>    a.print();</em><br><em>    b.print();</em><br><em>    c.print();</em></p>
<p><em>    b.set_x(3.0);</em><br><em>    b.set_y(4.0);</em></p>
<p><em>    // Print out the current state of b.</em><br><em>    cout &lt;&lt; endl;</em><br><em>    b.print();</em><br><em> }</em></p>
	                    

	        			
	                    
	                    
	                    	
	                    

            		 </main><!--Course_inner_section tag close --><div class="clear"></div>
 				 </div>
<!--Course_wrapper tag close -->             
 			 </div>
<!--left tag close -->
 			
         </div>
<!--grid tag close -->
      </div>
		
		<footer id="bottom"><div id="grid">
				
<div id="portletwrapper-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572" class="portletWrapper kssattr-portlethash-6f63772e626f74746f6d706f72746c65746d616e616765720a636f6e746578740a2f506c6f6e650a736974652d666f6f746572">
<div class="portletStaticText portlet-static-site-footer">
<!--googleoff: index-->
<div id="footer">
<nav aria-label="Footer"><nav id="foot-c1" class="grid_2 alpha" aria-labelledby="f-find-courses"><span class="footer" id="f-find-courses" aria-hidden="true">Find Courses</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/courses/find-by-topic/">Find by Topic</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-number/">Find by Course Number</a></li>
    <li><a href="https://ocw.mit.edu/courses/find-by-department/">Find by Department</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=instructional&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=approaches">Instructional Approach</a></li>
    <li><a href="https://ocw.mit.edu/educator/?view=teaching&amp;utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=find-courses&amp;utm_content=materials">Teaching Materials</a></li>
    <li><a href="https://ocw.mit.edu/courses/audio-video-courses/">Audio/Video Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/subtitled/">Courses with Subtitles</a></li>
    <li><a href="https://ocw.mit.edu/courses/online-textbooks/">Online Textbooks</a></li>
    <li><a href="https://ocw.mit.edu/courses/new-courses/">New Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/most-visited-courses/">Most Visited Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/ocw-scholar/">OCW Scholar Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/this-course-at-mit/">This Course at MIT</a></li>
    <li><a href="https://ocw.mit.edu/resources/">Supplemental Resources</a></li>
    <li><a href="https://ocw.mit.edu/courses/translated-courses/">Translated Courses</a></li>
    <li><a href="https://ocw.mit.edu/courses/?utm_source=ocw-footer&amp;utm_medium=link&amp;utm_campaign=mclstudy">View All Courses</a></li>
</ul></nav><div id="foot-c2" class="grid_2">
<nav aria-labelledby="f-about"><span id="f-about" class="footer" aria-hidden="true">About</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/about/">About OpenCourseWare</a></li>
    <li><a href="https://ocw.mit.edu/about/site-statistics/">Site Statistics</a></li>
    <li><a href="https://ocw.mit.edu/about/ocw-stories/">OCW Stories</a></li>
    <li><a href="https://ocw.mit.edu/about/newsletter/">News</a></li>
    <li><a href="https://ocw.mit.edu/about/media-coverage/press-releases/">Press Releases</a></li>
</ul></nav><!--about--><nav aria-labelledby="f-tools"><span id="f-tools" class="footer" aria-hidden="true">Tools</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/help/">Help &amp; FAQs</a></li>
    <li><a href="../../../common/jsp/feedback.htm">Contact Us</a></li>
    <li><a href="../../../common/search/AdvancedSearch.htm">Advanced Search</a></li>
    <li><a href="https://ocw.mit.edu/help/site-map/">Site Map</a></li>
    <li><a href="../../../common/terms/index.htm">Privacy &amp; Terms of Use</a></li>
    <li><a href="https://ocw.mit.edu/help/rss/">RSS Feeds</a></li>
</ul></nav><!--tools-->
</div>
<nav class="grid_2" id="foot-c3" aria-labelledby="f-donate"><span id="f-donate" class="footer" aria-hidden="true">Donate</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/donate">Make a Donation</a></li>
    <li><a href="https://ocw.mit.edu/donate/why-donate/">Why Donate?</a></li>
    <li><a href="https://ocw.mit.edu/donate/our-supporters/">Our Supporters</a></li>
    <li><a href="https://ocw.mit.edu/donate/other-ways-to-contribute/">Other Ways to Contribute</a></li>
    <li><a href="https://ocw.mit.edu/donate/shop-ocw/">Shop OCW</a></li>
    <li><a href="https://ocw.mit.edu/support/">Become a Corporate Sponsor</a></li>
</ul></nav><div class="grid_2" id="foot-c4"><nav aria-labelledby="f-featured-sites"><span id="f-featured-sites" class="footer" aria-hidden="true">Featured Sites</span>
<ul class="foot-bullet" role="presentation">
<li><a href="https://ocw.mit.edu/high-school/">Highlights for High School</a></li>
    <li><a href="https://ocw.mit.edu/educator/?utm_campaign=Educator&amp;utm_source=footer&amp;utm_medium=featured-sites">OCW Educator</a></li>
    <li><a href="https://ocw.mit.edu/courses/crosslinks/">MIT Crosslinks and OCW</a></li>
    <li><a href="https://ocw.mit.edu/courses/mitx-related-courseware/">MITx and Related OCW Courses</a></li>
    <li><a href="http://k12videos.mit.edu" aria-label="External Link: MIT+K12 Videos">MIT+K12 Videos</a></li>
    <li><a href="https://teachingexcellence.mit.edu/" aria-label="External Link: Teaching Excellence at MIT">Teaching Excellence at MIT</a></li>
    <li><a href="https://outreach.mit.edu/" aria-label="External Link: Outreach at MIT">Outreach@MIT</a></li>
    <li><a href="http://www.oeconsortium.org/" aria-label="External Link: Open Education Consortium">Open Education Consortium</a></li>
</ul></nav></div>
</nav><!--Footer Nav>--><aside id="foot-c5" class="grid_4 omega" aria-labelledby="f-our-corporate-supporters" style="min-height: 289px;"><span id="f-our-corporate-supporters" class="footer" aria-hidden="true">Our Corporate Supporters</span>           <!-- HOME_CORP_LOGO_1 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-0"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-0'); });
            </script></div>
<!-- HOME_CORP_LOGO_2 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-1"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-1'); });
            </script></div>
<!-- HOME_CORP_LOGO_3 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-2"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-2'); });
            </script></div>
<!-- HOME_CORP_LOGO_4 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-3"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-3'); });
            </script></div>
<!-- HOME_CORP_LOGO_5 -->
<div class="sponsors_google_ads_even" id="div-gpt-ad-1388181177156-4"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-4'); });
              </script></div>
<!-- HOME_CORP_LOGO_6 -->
<div class="sponsors_google_ads_odd" id="div-gpt-ad-1388181177156-5"><script type="text/javascript">
              googletag.cmd.push(function() { googletag.display('div-gpt-ad-1388181177156-5'); });
              </script></div>
</aside><aside class="grid_12 alpha omega" aria-label="OCW 15th Anniversary" style="border-top: thin solid #d5c9ba; padding-top: 24px; margin-bottom: 10px; text-align: center;"><p style="font-family: TitilliumText22LRegular,Verdana; text-align: center; font-size: 1.1em;">Support for <span style="letter-spacing: 0.5px; font-weight: bold;"><span style="text-transform: uppercase;">MIT OpenCourseWare's</span> 15th anniversary</span> is provided by <a href="http://www.sapientnitro.com/en-us.html#home"><img style="width: 145px; height: 35px; vertical-align: middle; margin-left: 7px;" alt="SapientNitro" src="../../../common/images/logo_sapient.png"></a></p>
</aside><aside class="grid_12 alpha omega" aria-labelledby="f-about-ocw" itemtype="http://schema.org/CollegeOrUniversity" itemscope="" itemprop="publisher" style="border-top: thin solid #d5c9ba; padding-top: 10px; margin-bottom: 10px;"><span id="f-about-ocw" class="footer" aria-hidden="true">             About <span itemprop="name">MIT OpenCourseWare</span></span>
<p itemprop="description" style="color: #999; font-size: 1em; line-height: 1.5em; margin-top: 10px;">OCW is a free and open publication of material from thousands of MIT courses, covering the entire MIT curriculum. <a href="https://ocw.mit.edu/about/">Learn more »</a></p>
<div id="foot-copy" class="grid_12 alpha omega" style="border-top: none;">
<a href="http://web.mit.edu">               <img style="width: 195; height: 44;" alt="Massachusetts Institute of Technology" src="../../../common/images/logo_mit.png"></a>             <a href="http://odl.mit.edu">               <img style="width: 289; height: 54; vertical-align: top;" alt="MIT Office of Digital Learning" src="https://ocw.mit.edu/images/logo_odl.png"></a>             <a href="http://www.oeconsortium.org/">               <img style="width: 219px; height: 59px; vertical-align: top;" alt="Open Education Consortium" src="https://ocw.mit.edu/images/logo_oec.png"></a>             <a itemprop="useRightsUrl" rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">               <img style="width: 126px; height: 44px; margin-right: 0; margin-left: 13px;" alt="Creative Commons" src="../../../common/images/cc_by-nc-sa.png"></a>
</div>
<div id="f-legal" class="grid_12 alpha omega" style="border-top: none;">
<p class="copyright">© 2001–2015<br>
Massachusetts Institute of Technology</p>
<p style="font-size: 0.9em; margin-bottom: 15px;">Your use of the MIT OpenCourseWare site and materials is subject to our <a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/">Creative Commons License</a> and other <a rel="cc:morePermissions" href="../../../common/terms/index.htm">terms of use</a>.</p>
</div>
</aside>
</div>
<!--footer-->   <!--googleon: index-->
</div>

</div>





                
			</div> <!-- bottom grid end -->
		</footer><!-- footer bottom end -->
</body>
</html>
